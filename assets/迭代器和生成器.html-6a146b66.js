const e=JSON.parse('{"key":"v-30d915ed","path":"/article/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8.html","title":"迭代器与生成器","lang":"zh-CN","frontmatter":{"title":"迭代器与生成器","date":"2022-11-06T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":"Javascript","tag":["迭代器","生成器"],"description":"迭代器与生成器 迭代的英文“iteration”源自拉丁文itero，意思是“重复”或“再来”。软件开发领域中的“迭代”，指的是按照顺序反复多次执行一段程序，通常会有明确的终止条件。ES6新增了两个高级特性：迭代器和生成器。 理解迭代 循环是迭代机制的基础。 但是通过循环来执行例程并不理想： 迭代之前需要实现知道如何使用数据结构； 遍历顺序并不是数据结构固有的。 虽然ES5新增了Array.prototype.forEach()方法，想通用迭代需求迈进了一步（但仍不理想），这个方法解决了单独记录索引和通过数组对象取得值的问题。不过，没有办法标识迭代何时终止。因此这个方法只适用于数组，而且回调结构也比较笨拙。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"迭代器与生成器"}],["meta",{"property":"og:description","content":"迭代器与生成器 迭代的英文“iteration”源自拉丁文itero，意思是“重复”或“再来”。软件开发领域中的“迭代”，指的是按照顺序反复多次执行一段程序，通常会有明确的终止条件。ES6新增了两个高级特性：迭代器和生成器。 理解迭代 循环是迭代机制的基础。 但是通过循环来执行例程并不理想： 迭代之前需要实现知道如何使用数据结构； 遍历顺序并不是数据结构固有的。 虽然ES5新增了Array.prototype.forEach()方法，想通用迭代需求迈进了一步（但仍不理想），这个方法解决了单独记录索引和通过数组对象取得值的问题。不过，没有办法标识迭代何时终止。因此这个方法只适用于数组，而且回调结构也比较笨拙。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-21T07:45:14.000Z"}],["meta",{"property":"article:tag","content":"迭代器"}],["meta",{"property":"article:tag","content":"生成器"}],["meta",{"property":"article:published_time","content":"2022-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-21T07:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代器与生成器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-21T07:45:14.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"理解迭代","slug":"理解迭代","link":"#理解迭代","children":[{"level":3,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":3,"title":"可迭代协议","slug":"可迭代协议","link":"#可迭代协议","children":[]},{"level":3,"title":"迭代器协议","slug":"迭代器协议","link":"#迭代器协议","children":[]},{"level":3,"title":"提前终止迭代器","slug":"提前终止迭代器","link":"#提前终止迭代器","children":[]}]},{"level":2,"title":"生成器","slug":"生成器","link":"#生成器","children":[{"level":3,"title":"生成器基础","slug":"生成器基础","link":"#生成器基础","children":[]},{"level":3,"title":"通过yield中断执行","slug":"通过yield中断执行","link":"#通过yield中断执行","children":[]},{"level":3,"title":"生成器对象作为可迭代对象","slug":"生成器对象作为可迭代对象","link":"#生成器对象作为可迭代对象","children":[]},{"level":3,"title":"使用yield实现输入和输出","slug":"使用yield实现输入和输出","link":"#使用yield实现输入和输出","children":[]},{"level":3,"title":"产生可迭代对象","slug":"产生可迭代对象","link":"#产生可迭代对象","children":[]},{"level":3,"title":"使用yield* 实现递归算法","slug":"使用yield-实现递归算法","link":"#使用yield-实现递归算法","children":[]},{"level":3,"title":"生成器作为默认迭代器","slug":"生成器作为默认迭代器","link":"#生成器作为默认迭代器","children":[]},{"level":3,"title":"提前终止生成器","slug":"提前终止生成器","link":"#提前终止生成器","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1669016714000,"updatedTime":1669016714000,"contributors":[{"name":"zhangting","email":"1092923594@qq.com","commits":1}]},"readingTime":{"minutes":7.45,"words":2236},"filePathRelative":"article/迭代器和生成器.md","localizedDate":"2022年11月6日","excerpt":"<h1> 迭代器与生成器</h1>\\n<p>迭代的英文“iteration”源自拉丁文itero，意思是“重复”或“再来”。软件开发领域中的“迭代”，指的是按照顺序反复多次执行一段程序，通常会有明确的终止条件。ES6新增了两个高级特性：迭代器和生成器。</p>\\n<h2> 理解迭代</h2>\\n<p>循环是迭代机制的基础。</p>\\n<p>但是通过循环来执行例程并不理想：</p>\\n<ul>\\n<li><strong>迭代之前需要实现知道如何使用数据结构；</strong></li>\\n<li><strong>遍历顺序并不是数据结构固有的</strong>。</li>\\n</ul>\\n<p><strong>虽然ES5新增了Array.prototype.forEach()方法，想通用迭代需求迈进了一步（但仍不理想），这个方法解决了单独记录索引和通过数组对象取得值的问题。不过，没有办法标识迭代何时终止。因此这个方法只适用于数组，而且回调结构也比较笨拙。</strong></p>","autoDesc":true}');export{e as data};

import{_ as o,W as c,X as p,Z as a,a1 as n,$ as t,a2 as e,C as l}from"./framework-609d4fec.js";const i={},d=e('<h2 id="map和set-映射和集合" tabindex="-1"><a class="header-anchor" href="#map和set-映射和集合" aria-hidden="true">#</a> Map和Set 映射和集合</h2><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><p><code>Map</code> 出现解决了什么问题呢？</p><p><code>Map</code>是一个带键的数据项的集合，就像一个<code>Object</code>一样。但是它们最大的差别在于<code>Map</code>允许任何类型的键。<code>Object</code>会将键转换为字符串</p><p>方法和属性如下：</p><ul><li><code>new Map()</code></li><li><code>map.set(key, value)</code></li><li><code>map.get(key)</code></li><li><code>map.has(key)</code></li><li><code>map.delete(key)</code></li><li><code>map.clear()</code></li><li><code>map.size()</code></li></ul>',6),u=a("p",null,[a("code",null,"Map"),n("是怎么比较键的？")],-1),r={href:"https://tc39.es/ecma262/#sec-samevaluezero",target:"_blank",rel:"noopener noreferrer"},k=e(`<blockquote><p>Map可以链式调用</p></blockquote><h4 id="map迭代" tabindex="-1"><a class="header-anchor" href="#map迭代" aria-hidden="true">#</a> Map迭代</h4><ul><li><code>map.keys()</code></li><li><code>map.values()</code></li><li><code>map.entries()</code> —— 遍历并返回所有的实体（returns an iterable for entries）<code>[key, value]</code>，<code>for..of</code> 在默认情况下使用的就是这个。</li></ul><blockquote><p>使用插入顺序</p><p>迭代顺序与插入值的顺序相同</p></blockquote><p>除此之外，<code>Map</code> 有内建的 <code>forEach</code> 方法，与 <code>Array</code> 类似：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对每个键值对 (key, value) 运行 forEach 函数</span>
recipeMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cucumber: 500 etc</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>Object.entries()</code>来创建map</p><p><code>Object.fromEntries()</code>从Map创建对象</p><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><p>值的集合</p><ul><li>new Set(iterable)</li><li>Set.add(value)</li><li>Set.delete(value)</li><li>Set.has(value)</li><li>Set.clear()</li><li>set.size()</li></ul><p>它的主要特点是，重复使用同一个值调用 <code>set.add(value)</code> 并不会发生什么改变</p><h4 id="set迭代" tabindex="-1"><a class="header-anchor" href="#set迭代" aria-hidden="true">#</a> Set迭代</h4><p>我们可以使用 <code>for..of</code> 或 <code>forEach</code> 来遍历 Set：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;oranges&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;apples&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bananas&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 与 forEach 相同：</span>
set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> valueAgain<span class="token punctuation">,</span> <span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>set.keys()</code> —— 遍历并返回所有的值（returns an iterable object for values），</li><li><code>set.values()</code> —— 与 <code>set.keys()</code> 作用相同，这是为了兼容 <code>Map</code>，</li><li><code>set.entries()</code> —— 遍历并返回所有的实体（returns an iterable object for entries）<code>[value, value]</code>，它的存在也是为了兼容 <code>Map</code>。</li></ul><h3 id="weakmap-and-weakset" tabindex="-1"><a class="header-anchor" href="#weakmap-and-weakset" aria-hidden="true">#</a> WeakMap and WeakSet</h3><p><code>WeakMap</code> 不会阻止垃圾回收机制对作为键的对象（key object）的回收。</p><p>WeakMap的键必须是对象不能是原始值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常工作（以对象作为键）</span>

<span class="token comment">// 不能使用字符串作为键</span>
weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Whoops&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error，因为 &quot;test&quot; 不是一个对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WeakMap</code> 不支持迭代以及 <code>keys()</code>，<code>values()</code> 和 <code>entries()</code> 方法。所以没有办法获取 <code>WeakMap</code> 的所有键或值。</p><p><code>WeakMap</code> 只有以下的方法：</p><ul><li><code>weakMap.get(key)</code></li><li><code>weakMap.set(key, value)</code></li><li><code>weakMap.delete(key)</code></li><li><code>weakMap.has(key)</code></li></ul>`,23),v={id:"weakset",tabindex:"-1"},m=a("a",{class:"header-anchor",href:"#weakset","aria-hidden":"true"},"#",-1),h={href:"https://zh.javascript.info/weakmap-weakset#weakset",target:"_blank",rel:"noopener noreferrer"},b=e("<p><code>WeakSet</code> 的表现类似：</p><ul><li>与 <code>Set</code> 类似，但是我们只能向 <code>WeakSet</code> 添加对象（而不能是原始值）。</li><li>对象只有在其它某个（些）地方能被访问的时候，才能留在 set 中。</li><li>跟 <code>Set</code> 一样，<code>WeakSet</code> 支持 <code>add</code>，<code>has</code> 和 <code>delete</code> 方法，但不支持 <code>size</code> 和 <code>keys()</code>，并且不可迭代。</li></ul><p><code>WeakMap</code> 和 <code>WeakSet</code> 被用作“主要”对象存储之外的“辅助”数据结构。一旦将对象从主存储器中删除，如果该对象仅被用作 <code>WeakMap</code> 或 <code>WeakSet</code> 的键，那么它将被自动清除。</p><p>weak表示 弱集合的值是弱弱地拿着，不属于正式的引用，不会阻止垃圾回收。</p>",4);function f(_,M){const s=l("ExternalLinkIcon");return c(),p("div",null,[d,a("blockquote",null,[u,a("p",null,[n("使用"),a("a",r,[n("sameValueZero"),t(s)]),n("算法来比较键是否相等。跟===差不多。但区别是NaN被看成是等于NaN。所以NaN也可以被用作键")])]),k,a("h2",v,[m,n(),a("a",h,[n("WeakSet"),t(s)])]),b])}const w=o(i,[["render",f],["__file","Map and Set.html.vue"]]);export{w as default};

import{_ as a,W as i,X as e,a2 as r}from"./framework-609d4fec.js";const l={},h=r('<h1 id="宏观视角上的浏览器" tabindex="-1"><a class="header-anchor" href="#宏观视角上的浏览器" aria-hidden="true">#</a> 宏观视角上的浏览器</h1><h2 id="打开一个页面-为什么会有4个进程" tabindex="-1"><a class="header-anchor" href="#打开一个页面-为什么会有4个进程" aria-hidden="true">#</a> 打开一个页面，为什么会有4个进程</h2><p>打开Chrome浏览器，然后在Chrome任务管理器中我们可以看到以下：</p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/image-20220915143621306.png" alt="image-20220915143621306"></p><p>有好几个进程。</p><h3 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a> 进程和线程</h3><p>多线程可以处理并行任务，但是线程不能单独存在，必须由进程来启动和管理。</p><p>一个进程就是一个程序的运行实例。在启动一个程序的时候，操作系统会为该程序创建一块内存、用来存放代码、运行中的数据和一个执行任务的主线程，我们将这样一个运行环境成为进程。</p><ul><li><p>进程中的任意一线程执行出错，都会导致整个进程崩溃。</p></li><li><p>线程之间共享进程中的数据</p></li><li><p>当一个进程关闭之后，操作系统会回收进程所占用的内存。</p></li><li><p>进程之间的内容相互隔离。</p><p>如果需要进程间的通信，可以使用IPC机制</p></li></ul><h3 id="单进程浏览器时代" tabindex="-1"><a class="header-anchor" href="#单进程浏览器时代" aria-hidden="true">#</a> 单进程浏览器时代</h3><p>浏览器的所有功能模块都是运行在同一进程里，这些模块包含了网络、插件、js运行环境、渲染引擎和页面等。2007年之前，浏览器基本都是单线程的。</p><p>这么多功能模块运行在一个进程，导致浏览器不稳定、不流畅、不安全。</p><ol><li><p>不稳定</p><p>某一功能模块的崩溃会造成整个浏览器崩溃</p></li><li><p>不流畅</p><p>同一时刻只能有一个模块运行，所以当复杂功能在执行时，会占用整个进程资源，造成浏览器没有响应、卡顿。</p></li><li><p>不安全</p><ul><li>插件-插件可以使用C/C++等代码编写，通过插件可以获取到操作系统的任意资源，当你在页面运行一个插件时也就意味着这个插件能完全操作你的电脑。如果是个恶意插件，那么它就可以释放病毒、窃取你的账号密码，引发安全性问题。</li><li>页面脚本-可以通过浏览器的漏洞来获取系统权限，这些脚本获取系统权限之后也可以对你的电脑做一些恶意的事情，同样也会引发安全问题。</li></ul></li></ol><h3 id="多进程浏览器时代" tabindex="-1"><a class="header-anchor" href="#多进程浏览器时代" aria-hidden="true">#</a> 多进程浏览器时代</h3><p>最新的Chrome浏览器包括：1个浏览器主进程、1个GPU进程、一个网络进程、多个渲染进程和多个插件进程。</p><ul><li>浏览器主进程：主要负责界面展示、用户交互、子进程管理，同时提供存储等功能；</li><li>渲染进程：核心任务是将HTML、CSS和JavaScript转换为用户可以与之交互的页面，排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个标签页创建一个渲染进程。渲染进程都是运行在沙箱模式下。</li><li>GPU进程-绘制UI界面和网页</li><li>网络进程-复杂页面的网络资源加载</li><li>插件进程-负责插件的运行</li></ul><p>缺点：</p><ul><li>更高的资源占用</li><li>更复杂的体系架构</li></ul><h2 id="tcp协议-如何保证页面文件能被完整送达浏览器" tabindex="-1"><a class="header-anchor" href="#tcp协议-如何保证页面文件能被完整送达浏览器" aria-hidden="true">#</a> TCP协议：如何保证页面文件能被完整送达浏览器</h2><h3 id="一个数据包的旅途" tabindex="-1"><a class="header-anchor" href="#一个数据包的旅途" aria-hidden="true">#</a> 一个数据包的旅途</h3><p><strong>互联网，实际上是一套理念和协议组成的体系架构</strong></p><h4 id="_1-ip-把数据包送达到目的主机" tabindex="-1"><a class="header-anchor" href="#_1-ip-把数据包送达到目的主机" aria-hidden="true">#</a> 1. IP：把数据包送达到目的主机</h4><p>数据包要在互联网进行传输，就要符合网际协议（Internet protocol，简称IP）标准。</p><h4 id="_2-udp-把数据包送达应用程序" tabindex="-1"><a class="header-anchor" href="#_2-udp-把数据包送达应用程序" aria-hidden="true">#</a> 2. UDP：把数据包送达应用程序</h4><p>IP是非常底层的协议，只负责把数据包传送到对方电脑，但是对方电脑并不知道把数据包交给哪个程序，是交给浏览器还是交给王者荣耀？因此，需要基于IP之上开发能和应用打交道的协议，最常见的是“用户数据包协议（User Datagram Protocol）”，简称UDP。</p><p>在使用UDP发送数据时，有各种因素会导致数据包出错，虽然UDP可以校验数据是否正确，但是对于错误的数据包，UDP并不提供重发机制，只是丢弃当前的包，而且UDP在发送之后也无法知道是否能达到目的地。</p><p>虽说UDP不能保证数据可靠性，但是传输速度却非常快，所以UDP会应用在一些关注速度、但不那么严格要求数据完整性的领域，如在线视频、互动游戏等</p><h4 id="_3-tcp-把数据完整地送达应用程序" tabindex="-1"><a class="header-anchor" href="#_3-tcp-把数据完整地送达应用程序" aria-hidden="true">#</a> 3. TCP：把数据完整地送达应用程序</h4><p>由于UDP存在以下两个问题</p><ul><li>数据包在传输过程中容易丢失；</li><li>大文件会被拆分为小的数据包传输，小数据包经过不同的路由在不同的时间到达接收端，而UDP不知道如何组装这些小数据包，还原成完整的文件。</li></ul><p>基于以上两个问题，我们引入TCP</p><p>TCP(Transmission Control Protocol，传输控制协议)，是一中面向连接的、可靠的、基于字节流的传输层通信协议。相对于UDP，TCP有以下两个特点：</p><ul><li>对于数据包丢失的情况，提供重传机制</li><li>TCP引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。</li></ul><p>TCP包除了包含目标端口号和本机端口号之外，还提供用于排序的序列号，以便接收端通过序号重排数据包。</p><p>TCP头的信息保证了一块打的数据传输的完整性。</p><p>一个完整的TCP连接的生命周期：</p><ul><li>建立连接： 3次握手</li><li>传输数据</li><li>断开连接：4次挥手</li></ul><h2 id="http请求流程-为什么很多站点第二次打开速度会很快" tabindex="-1"><a class="header-anchor" href="#http请求流程-为什么很多站点第二次打开速度会很快" aria-hidden="true">#</a> HTTP请求流程：为什么很多站点第二次打开速度会很快？</h2><p>缓存</p><h2 id="导航流程-从输入url到页面展示这中间发生了什么" tabindex="-1"><a class="header-anchor" href="#导航流程-从输入url到页面展示这中间发生了什么" aria-hidden="true">#</a> 导航流程：从输入URL到页面展示这中间发生了什么？</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考：</h2><p>https://blog.poetries.top/browser-working-principle/guide/part1/lesson05.html#_1-%E6%8A%8Acss%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E8%83%BD%E5%A4%9F%E7%90%86%E8%A7%A3%E7%9A%84%E7%BB%93%E6%9E%84</p>',42),p=[h];function t(d,n){return i(),e("div",null,p)}const o=a(l,[["render",t],["__file","浏览器工作原理-浏览器进程.html.vue"]]);export{o as default};

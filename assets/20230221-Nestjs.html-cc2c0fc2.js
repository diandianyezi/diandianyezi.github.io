import{_ as e,W as a,X as d,a2 as o}from"./framework-609d4fec.js";const t={},s=o(`<h1 id="nestjs" tabindex="-1"><a class="header-anchor" href="#nestjs" aria-hidden="true">#</a> Nestjs</h1><p>构建高效可扩展的一个基于Nodejs服务端应用程序开发框架，完全支持Typescript，结合了AOP面向切面的编程方式。</p><ul><li>spring MVC风格：依赖注入、IOC控制反转</li><li>开箱即用支持 express和fastify。</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> nestjs/cli
nest new project-name
// 通过--strict可以创建一个严格模式下的Typescript项目
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>确保Node版本&gt;=12，除了v13</p></blockquote><p>文件目录如下图所示：</p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/image-20230223140133768.png" alt="image-20230223140133768"></p><p>核心文件：</p><p>app.controller.spec.ts // 控制器的测试用例</p><p>app.controller.ts // 基本的控制器</p><p>app.module.ts // 应用程序根模块</p><p>app.service.ts // 基本服务</p><p>main.ts // 应用程序入口文件， uses the core function <code>NestFactory</code> to create a Nest application instance.</p><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h2><h3 id="ioc控制反转、di-依赖注入" tabindex="-1"><a class="header-anchor" href="#ioc控制反转、di-依赖注入" aria-hidden="true">#</a> IOC控制反转、DI 依赖注入</h3><p>IOC控制反转：Inversion of Control，高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p><p>DI依赖注入：Dependency Injection，</p><p>装饰器</p><h3 id="controllers-控制器" tabindex="-1"><a class="header-anchor" href="#controllers-控制器" aria-hidden="true">#</a> Controllers 控制器</h3><p>接收请求并返回响应，路由机制控制哪个控制器接收对应请求，每个控制器不止一个路由，不同的路由表现不同。</p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/image-20230223153003846.png" alt="image-20230223153003846"></p><h3 id="routing-路由" tabindex="-1"><a class="header-anchor" href="#routing-路由" aria-hidden="true">#</a> Routing 路由</h3><p>使用 @Controller 定义控制器，</p><blockquote><p>To create a controller using the CLI, simply execute the <code>$ nest g controller cats</code> command.</p></blockquote><h3 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h3><p>Nest provides decorators for all of the standard HTTP methods: <code>@Get()</code>, <code>@Post()</code>, <code>@Put()</code>, <code>@Delete()</code>, <code>@Patch()</code>, <code>@Options()</code>, and <code>@Head()</code>. In addition, <code>@All()</code> defines an endpoint that handles all of them.</p><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><h3 id="route通配符" tabindex="-1"><a class="header-anchor" href="#route通配符" aria-hidden="true">#</a> Route通配符</h3><p>The <code>&#39;ab*cd&#39;</code> route path will match <code>abcd</code>, <code>ab_cd</code>, <code>abecd</code>, and so on. The characters <code>?</code>, <code>+</code>, <code>*</code>, and <code>()</code> may be used in a route path, and are subsets of their regular expression counterparts. The hyphen ( <code>-</code>) and the dot (<code>.</code>) are interpreted literally by string-based paths.</p><h3 id="status-code" tabindex="-1"><a class="header-anchor" href="#status-code" aria-hidden="true">#</a> Status Code</h3><p>Get请求默认为200，Post请求为201</p><p>使用<code>@HttpCode(...)</code> 装饰器</p><h3 id="headers" tabindex="-1"><a class="header-anchor" href="#headers" aria-hidden="true">#</a> Headers</h3><p>To specify a custom response header, you can either use a <code>@Header()</code> decorator or a library-specific response object (and call <code>res.header()</code> directly).</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@<span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">&#39;Cache-Control&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="redirection" tabindex="-1"><a class="header-anchor" href="#redirection" aria-hidden="true">#</a> Redirection</h4><p>To redirect a response to a specific URL, you can either use a <code>@Redirect()</code> decorator or a library-specific response object (and call <code>res.redirect()</code> directly).</p><p><code>@Redirect()</code> takes two arguments, <code>url</code> and <code>statusCode</code>, both are optional. The default value of <code>statusCode</code> is <code>302</code> (<code>Found</code>) if omitted.</p>`,39),c=[s];function r(n,i){return a(),d("div",null,c)}const h=e(t,[["render",r],["__file","20230221-Nestjs.html.vue"]]);export{h as default};

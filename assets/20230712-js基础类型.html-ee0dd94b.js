import{_ as o,W as c,X as i,Z as n,a1 as s,$ as e,a2 as t,C as p}from"./framework-609d4fec.js";const l={},u=t(`<h1 id="js数据类型" tabindex="-1"><a class="header-anchor" href="#js数据类型" aria-hidden="true">#</a> js数据类型</h1><ul><li>js是一种弱类型语言或者动态语言。不用提前声明变量类型，在程序运行过程中，类型会被自动确定。</li></ul><p>ECMAScript标准定义了原始数据类型和引用数据类型，共七种内置的数据类型：</p><ul><li>原始数据类型（基本类型）：按值访问，可以操作保存在变量种实际的值。 <ul><li>空值 null</li><li>未定义 undefined</li><li>布尔值 boolean</li><li>数字 number</li><li>字符串 string</li><li>符号 symbol</li></ul></li><li>引用类型（复杂数据类型）：引用类型的值是保存在内存中的对象。 <ul><li>对象 Object <ul><li>布尔对象 Boolean</li><li>数字对象 Number</li><li>字符串对象 String</li><li>函数对象 Function</li><li>数组对象 Array</li><li>日期对象 Date</li><li>正则对象 RegExp</li><li>错误对象 Error</li></ul></li></ul></li></ul><blockquote><p>Javascript 不允许直接访问内存种的位置，引用类型的值是按引用访问的。</p></blockquote><h2 id="原始数据类型" tabindex="-1"><a class="header-anchor" href="#原始数据类型" aria-hidden="true">#</a> 原始数据类型</h2><h3 id="空值" tabindex="-1"><a class="header-anchor" href="#空值" aria-hidden="true">#</a> 空值</h3><p>空值<code>null</code>是一个字面量，不像<code>undefined</code>是全局对象的一个属性。</p><p><code>null</code>表示变量未指向任何对象。</p><h3 id="未定义值" tabindex="-1"><a class="header-anchor" href="#未定义值" aria-hidden="true">#</a> 未定义值</h3><p><code>undefined</code>是<em>全局对象</em>的一个属性。也就是说，它是全局作用域的一个变量。<code>undefined</code>的最初值就是原始数据类型<code>undefined</code>。</p><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h3><p>布尔类型表示一个逻辑实体，可以有两个值：<code>true</code>和<code>false</code>。</p><h3 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h3><ul><li>十进制</li><li>八进制：第一位必须是0</li><li>十六进制：前两位为0x</li></ul><blockquote><p>八进制在严格模式下 <code>&quot;use strict&quot;</code> 是无效的，会导致 JavaScript 报错，避免使用。</p></blockquote><h4 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>浮点型数据在计算时容易丢失精度，这一点并不仅在js中存在。</p><h4 id="数字的范围" tabindex="-1"><a class="header-anchor" href="#数字的范围" aria-hidden="true">#</a> 数字的范围</h4><ul><li><code>Number.MIN_VALUE</code> 或 <code>Number.NEGATIVE_INFINITY</code>：表示 JavaScript 中的最小值</li><li><code>Number.MAX_VALUE</code> 或 <code>Number.POSITIVE_INFINITY</code>：表示 JavaScript 中的最大值</li><li><code>Infinity</code>：表示无穷大</li><li><code>-Infinity</code>：表示无穷小</li></ul><h4 id="nan" tabindex="-1"><a class="header-anchor" href="#nan" aria-hidden="true">#</a> NaN</h4><p>NaN（Not a number）的含义是本该返回数值的操作未返回数值，返回了NaN就不会抛出异常影响语句流畅性。</p><p><code>NaN</code> 属性的初始值就是 <code>NaN</code>，和 <code>Number.NaN</code> 的值一样。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token number">NaN</span> <span class="token operator">!==</span> <span class="token number">NaN</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>JavaScript 的字符串类型用于表示文本数据。它是一组 16 位的无符号整数值的元素。</p><h3 id="符号" tabindex="-1"><a class="header-anchor" href="#符号" aria-hidden="true">#</a> 符号</h3><p><code>Symbol</code>是ECMAScript第6版中新定义的。该类型的性质在于这个类型的值可以用来创建匿名的对象属性。<strong>该数据类型通常被用作一个对象属性的键值，当这个属性是用于类或对象类型的内部使用的时候。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myPrivateMethod <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">this</span><span class="token punctuation">[</span>myPrivateMethod<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h2><p>对象是由new运算符加上要实例化的对象的名字创建的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类型检测" tabindex="-1"><a class="header-anchor" href="#类型检测" aria-hidden="true">#</a> 类型检测</h2><p>类型检测方法：</p><ul><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>Object.prototype.toStirng</code></li><li><code>constructor</code></li></ul><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;undefined&quot;</span>

<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;object&quot;</span>

<span class="token keyword">typeof</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;number&quot;</span>

<span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;number&quot;</span>

<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;boolean&quot;</span>

<span class="token keyword">typeof</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;string&quot;</span>

<span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;function&quot;</span>

<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;object&quot;</span>

<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;object&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>typeof</code> 操作符适合对 <strong>基本类型</strong>（除 <code>null</code> 之外）及 <code>function</code> 的检测使用，而对引用数据类型（如 Array）等不适合使用。</p><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3><p><code>instanceof</code> 运算符用于检测一个对象在其 <strong>原型链</strong> 中是否存在一个构造函数的 <code>prototype</code> 属性。</p><ul><li>左操作数为对象，不是返回false；</li><li>右操作数为函数对象或者函数构造器，不是就返回TypeError异常。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj <span class="token keyword">instanceof</span> <span class="token class-name">constr</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span>

<span class="token keyword">const</span> ben <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ben <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>

<span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
one <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>
one <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>
ben <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何 一个构造函数都有一个<code>prototype</code>对象属性，这个对象属性将用作<code>new</code>实例化对象的原型对象。</p><blockquote><p>instanceof适合用于判断对象是否属于Array、Date和RegExp等内置对象。</p><p>不同 window 或 <code>iframe</code> 之间的对象类型检测无法使用 <code>instanceof</code> 检测。</p></blockquote><h3 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString</h3><p>可以通过 <code>toString()</code>来获取每隔对象的类型。</p><p>为了 <strong>每个对象</strong> 都能通过 <code>Object.prototype.toString</code> 来检测，需要以 <code>Function.prototype.call</code> 或者 <code>Function.prototype.apply</code> 的形式来调用，传递要检查的对象作为第一个参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Obejct</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>；
<span class="token comment">//  &quot;[object Undefined]&quot;</span>

<span class="token class-name">Obejct</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>；
<span class="token comment">//  &quot;[object Null]&quot;</span>

<span class="token class-name">Obejct</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>；
<span class="token comment">//  &quot;[object Boolean]&quot;</span>

<span class="token class-name">Obejct</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>；
<span class="token comment">/// &quot;[object String]&quot;</span>

<span class="token class-name">Obejct</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>；
<span class="token comment">//  &quot;[object Number]&quot;</span>

<span class="token class-name">Obejct</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>；
<span class="token comment">//  &quot;[object Array]&quot;</span>

<span class="token class-name">Obejct</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>；
<span class="token comment">//  &quot;[object Object]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用 <code>Object.prototype.toString</code> 方法能精准地判断出值的数据类型。</p></blockquote><blockquote><p><code>Object.prototype.toString</code> 属于 <code>Object</code> 的原型方法，而 <code>Array</code> 或 <code>Function</code> 等类型作为 <code>Object</code> 的实例，都重写了 <code>toString</code> 方法。因此，不同对象类型调用 <code>toString</code> 方法时，调用的是重写后的 <code>toString</code> 方法，而非 <code>Object</code> 上原型 <code>toString</code> 方法，所以采用 <code>xxx.toString()</code> 不能得到其对象类型，只能将 <code>xxx</code> 转换成字符串类型。</p></blockquote><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>任何对象都有 <code>constructor</code> 属性，继承自原型对象，<code>constructor</code> 会指向构造这个对象的构造器或构造函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Student<span class="token punctuation">;</span>
<span class="token comment">//  true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组检测" tabindex="-1"><a class="header-anchor" href="#数组检测" aria-hidden="true">#</a> 数组检测</h3><p>ECMAScript5 将 <code>Array.isArray()</code> 正式引入 JavaScript，该方法能准确检测一个变量是否为数组类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><p>允许隐式类型转换和允许强制类型转换</p><h3 id="基本规则" tabindex="-1"><a class="header-anchor" href="#基本规则" aria-hidden="true">#</a> 基本规则</h3><h4 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> ToString</h4><p>常见转换为String类型的规则：</p><ul><li>null 转为 &#39;null&#39;;</li><li>Undefined 转为 &#39;undefined&#39;</li><li>Boolean类型 <ul><li>true 转为 &#39;true&#39;</li><li>false 转为 &#39;false&#39;</li></ul></li><li>Number类型转为数字的字符串形势</li><li>Array类型：转为字符串将各元素以小写逗号连接， <ul><li>空数组转为空字符串</li><li>数组中null 和 undefined 会被当做空字符串处理。</li></ul></li><li>普通对象：转为字符串相当于直接使用Object.prototype.toString()，返回[object Object]。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;null&quot;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;undefined&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;true&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;10&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1e21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1e+21&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1,2,3&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1,,3&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;[object Objecr]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tonumber" tabindex="-1"><a class="header-anchor" href="#tonumber" aria-hidden="true">#</a> ToNumber</h4><ul><li>null： 转为0</li><li>undefined： 转为NaN</li><li>String类型：如果是纯数字形式，则转为对应的数字 <ul><li>空字符串转为0</li><li>否则一律按照失败处理，转为NaN</li></ul></li><li>Boolean类型 <ul><li>true转为1</li><li>false转为0</li></ul></li><li>Array类型：首先会转为原始数据类型，然后再根据转换后的原始类型按照上面的规则处理。</li><li>对象：同数组的处理。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 10</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;10a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="toboolean" tabindex="-1"><a class="header-anchor" href="#toboolean" aria-hidden="true">#</a> ToBoolean</h4><p>JavaScript 中假值只有<code>false</code> <code>null</code> <code>undefined</code> <code>&quot;&quot;</code> <code>0</code> 和 <code>NaN</code>,其他值转为Boolean都为<code>true</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 10</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;10a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="toprimitive" tabindex="-1"><a class="header-anchor" href="#toprimitive" aria-hidden="true">#</a> ToPrimitive</h4><blockquote><p>ToPrimitive 方法用于将引用类型转换为原始数据类型的操作</p></blockquote><p>值为引用数据类型时，会调用 JavaScript 内置的 <code>@@ToPrimitive(hint)</code> 方法来指定其目标类型。</p><ul><li>如果传入值为Number类型，则调用对象的 valueOf()方法，若返回值为原始数据类型，则结束ToPrimitive操作，如果返回的不是原始数据类型，则继续调用对象的toString()方法，若返回值为原始数据类型，则结束ToPrimitive操作，如果返回的还是引用数据类型，则抛出异常。</li><li>如果传入值为String类型，则先调用toString()方法，再调用valueOf()方法。</li></ul>`,75),d=n("code",null,"toString()",-1),r={href:"https://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.im/post/59ad2585f265da246a20e026#heading-1",target:"_blank",rel:"noopener noreferrer"},v=t('<p>而在 ES6 中引入 Symbol 类型之后，JavaScript 会优先调用对象的 <code>[Symbol.toPrimitive]</code> 方法来将该对象转化为原始类型，那么方法的调用顺序就变为了：</p><ul><li>当 <code>obj[Symbol.toPrimitive](preferredType)</code> 方法存在时，优先调用该方法</li><li>如果 <code>preferredType</code> 参数为 String 类型，则依次尝试 <code>obj.toString()</code> 与 <code>obj.valueOf()</code></li><li>如果 <code>preferredType</code> 参数为 Number 类型或者默认值，则依次尝试 <code>obj.valueOf()</code> 与 <code>obj.toString()</code></li></ul><h4 id="显式类型转换" tabindex="-1"><a class="header-anchor" href="#显式类型转换" aria-hidden="true">#</a> 显式类型转换</h4><p>通过手动进行类型转换，JavaScript提供了一下转型函数：</p><ul><li>转换为数值类型 <ul><li>Number(mix)</li><li>parseInt(string, radix)</li><li>parseFloat(string)</li></ul></li><li>转换为字符串类型 <ul><li>toString(radix)</li><li>String(mix)</li></ul></li><li>转换为布尔类型 <ul><li>Boolean(mix)</li></ul></li></ul><h4 id="隐式类型数据" tabindex="-1"><a class="header-anchor" href="#隐式类型数据" aria-hidden="true">#</a> 隐式类型数据</h4><p>在JavaScript，当运算符在运算时，如果两边数据不统一，CPU就无法运算，这时我们编译器会自动将运算符两边的数据做一个数据类型转换，转成相同的数据类型再计算。</p><p>编译器自动转换的方式成为隐式类型转换。</p><p>JavaScript 的数据类型隐式转换主要分为三种情况：</p><ul><li>转换为 Boolean 类型</li><li>转换为 Number 类型</li><li>转换为 String 类型</li></ul><p>值在 <strong>逻辑判断</strong> 和 <strong>逻辑运算</strong> 时会隐式转换为 Boolean 类型。</p><h5 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h5><h6 id="加号运算符" tabindex="-1"><a class="header-anchor" href="#加号运算符" aria-hidden="true">#</a> 加号运算符</h6><p>加号运算符作为一目运算符时，会转换为Number类型</p><p>作为二目运算符时，会根据两边值类型进行数据类型隐式转换。</p>',15);function m(b,h){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[n("p",null,[s("对于不同类型的引用数据类型，ToPrimitive 的规则有所不同，比如 Date 对象会先调用 "),d,s(" 方法，具体可以参考 "),n("a",r,[s("ECMAScript6 规范中对 ToPrimitive 的定义解释"),e(a)])]),n("p",null,[s("以 JavaScript 实现 "),n("a",k,[s("ToPrimitive"),e(a)])])]),v])}const g=o(l,[["render",m],["__file","20230712-js基础类型.html.vue"]]);export{g as default};

import{_ as n,W as a,X as s,a2 as e}from"./framework-609d4fec.js";const t={},p=e(`<h1 id="前缀和与差分" tabindex="-1"><a class="header-anchor" href="#前缀和与差分" aria-hidden="true">#</a> 前缀和与差分</h1><h2 id="前缀和" tabindex="-1"><a class="header-anchor" href="#前缀和" aria-hidden="true">#</a> 前缀和</h2><p>是一种重要的预处理，能大大降低查询的时间复杂度。可以简单理解为“数列的前n项和”</p><h3 id="例题" tabindex="-1"><a class="header-anchor" href="#例题" aria-hidden="true">#</a> 例题</h3><p>有N个正整数放到数组A里，现在要求一个新的数组B，新数组的第i个数B[i] 是原数组A第0到第i个数的和。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> cur<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二维-多维前缀和" tabindex="-1"><a class="header-anchor" href="#二维-多维前缀和" aria-hidden="true">#</a> 二维/多维前缀和</h3><p>多维前缀和的普通求解方法几乎都是基于容斥原理。</p><h2 id="差分" tabindex="-1"><a class="header-anchor" href="#差分" aria-hidden="true">#</a> 差分</h2><p>差分是一种和前缀和相对的策略，可以当做是求和的逆运算。</p><p>这种策略的定义是令</p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/image-20230316140606862.png" alt="image-20230316140606862"></p><p>参考：</p><ul><li><p>https://oi-wiki.org/basic/prefix-sum/</p></li><li><p>https://github.com/SharingSource/LogicStack-LeetCode/wiki/%E5%89%8D%E7%BC%80%E5%92%8C</p></li></ul>`,14),i=[p];function c(o,r){return a(),s("div",null,i)}const l=n(t,[["render",c],["__file","20230322-前缀和与差分 (copy).html.vue"]]);export{l as default};

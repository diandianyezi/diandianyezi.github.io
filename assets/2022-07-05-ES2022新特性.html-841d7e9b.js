import{_ as n,W as s,X as a,a2 as t}from"./framework-609d4fec.js";const p={},e=t(`<h1 id="es2022-新特性" tabindex="-1"><a class="header-anchor" href="#es2022-新特性" aria-hidden="true">#</a> ES2022 新特性</h1><p>2022年6月22日，第123届ECma大会批准了ECMAScript2022语言规范，这意味着它现在正式成为标准</p><h3 id="新的class成员" tabindex="-1"><a class="header-anchor" href="#新的class成员" aria-hidden="true">#</a> 新的class成员</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  instancePublicField <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> staticPublicField <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  
  #instancePrivateField <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> #instancePrivateField <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

	<span class="token function">#nonStaticPrivateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">#nonStaticPrivateAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">set</span> <span class="token function">#nonStaticPrivateAccessor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">static</span> <span class="token function">#staticPrivateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">#staticPrivateAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">set</span> <span class="token function">#staticPrivateAccessor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token comment">// 静态初始化代码块</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以通过一下方式创建公共属性： <ul><li>实例公有属性</li><li>静态公有属性</li></ul></li><li>私有属性是新的，可以通过以下方式创建： <ul><li>私有属性（实例私有属性and静态私有属性）</li><li>私有方法和访问器</li></ul></li><li>静态初始化代码块</li></ul><h3 id="使用in操作符检查私有属性" tabindex="-1"><a class="header-anchor" href="#使用in操作符检查私有属性" aria-hidden="true">#</a> 使用in操作符检查私有属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ClassWithPrivateSlot</span> <span class="token punctuation">{</span>
  #privateSlot <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">hasPrivateSlot</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> #privateSlot <span class="token keyword">in</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWithPrivateSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>
  ClassWithPrivateSlot<span class="token punctuation">.</span><span class="token function">hasPrivateSlot</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>
  ClassWithPrivateSlot<span class="token punctuation">.</span><span class="token function">hasPrivateSlot</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块中的顶层await" tabindex="-1"><a class="header-anchor" href="#模块中的顶层await" aria-hidden="true">#</a> 模块中的顶层await</h3><p>可在模块顶层使用await并且不再需要输入异步函数或方法</p><h3 id="error-cause" tabindex="-1"><a class="header-anchor" href="#error-cause" aria-hidden="true">#</a> error.cause</h3><p>Error及其子类现在可以让我们指定哪个错误导致了当前错误：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>otherError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Something went wrong&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">cause</span><span class="token operator">:</span> otherError<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>error.cause</code> 访问</p><h3 id="可索引值方法-at" tabindex="-1"><a class="header-anchor" href="#可索引值方法-at" aria-hidden="true">#</a> 可索引值方法 <code>.at()</code></h3><p>可以读取给定索引处的元素（就像[]），而且支持负数（与[]不同）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下“可索引”类型具有 <code>.at()</code>方法：</p><ul><li><code>string</code></li><li><code>Array</code></li><li>所有的<code>Typed Array</code>: <code>Unit8Array</code>等</li></ul><h3 id="regexp-match-指数" tabindex="-1"><a class="header-anchor" href="#regexp-match-指数" aria-hidden="true">#</a> RegExp match 指数</h3><p>如果给正则表达式添加标识 <code>/d</code>，使用它生成匹配对象，就会记录每个组捕获的开始和结束索引（A行和B行）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> matchObj <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(a+)(b+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">d</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;aaaabb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>
  matchObj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;aaaa&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>
  matchObj<span class="token punctuation">.</span>indices<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// (A)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>
  matchObj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;bb&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>
  matchObj<span class="token punctuation">.</span>indices<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment">// (B)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-hasown-obj-propkey" tabindex="-1"><a class="header-anchor" href="#object-hasown-obj-propkey" aria-hidden="true">#</a> Object.hasOwn(obj, propKey)</h3><p><code>Object.hasOwn(obj, propKey)</code> 提供了一个安全的方式检查对象 <code>obj</code> 是否有键为 <code>propKey</code>的自有（非继承的） 属性:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">protoProp</span><span class="token operator">:</span> <span class="token string">&#39;protoProp&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">__proto__</span><span class="token operator">:</span> proto<span class="token punctuation">,</span>
  <span class="token literal-property property">objProp</span><span class="token operator">:</span> <span class="token string">&#39;objProp&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">&#39;protoProp&#39;</span> <span class="token keyword">in</span> obj<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (A)</span>

assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;protoProp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (B)</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">&#39;protoProp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (C)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： <code>in</code>检测继承的属性，而 <code>Object.hasOwn()</code>仅检测自己的属性</p>`,25),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","2022-07-05-ES2022新特性.html.vue"]]);export{r as default};

const e=JSON.parse('{"key":"v-277f9d38","path":"/article/20230327-Trie%20(copy).html","title":"Trie","lang":"zh-CN","frontmatter":{"description":"Trie 又被成为字典树或者前缀树，是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。 有根树，每个节点包含以下字段： 指向子节点的指针数组children 布尔字段isEnd，表示该结点是否为字符串的结尾。 插入字符串 我们从字典树的根开始，插入字符串。对于当前字符对应的子节点，有两种情况： 子节点存在。沿着指针移动到子节点，继续处理下一个字符。 子节点不存在。创建一个新的子节点，记录在 children数组的对应位置上，然后沿着指针移动到子节点，继续搜索下一个字符。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/20230327-Trie%20(copy).html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"Trie"}],["meta",{"property":"og:description","content":"Trie 又被成为字典树或者前缀树，是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。 有根树，每个节点包含以下字段： 指向子节点的指针数组children 布尔字段isEnd，表示该结点是否为字符串的结尾。 插入字符串 我们从字典树的根开始，插入字符串。对于当前字符对应的子节点，有两种情况： 子节点存在。沿着指针移动到子节点，继续处理下一个字符。 子节点不存在。创建一个新的子节点，记录在 children数组的对应位置上，然后沿着指针移动到子节点，继续搜索下一个字符。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T14:04:34.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-29T14:04:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Trie\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T14:04:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"插入字符串","slug":"插入字符串","link":"#插入字符串","children":[]}],"git":{"createdTime":1680098674000,"updatedTime":1680098674000,"contributors":[{"name":"zhangting","email":"1092923594@qq.com","commits":1}]},"readingTime":{"minutes":1.07,"words":320},"filePathRelative":"article/20230327-Trie (copy).md","localizedDate":"2023年3月29日","excerpt":"<h1> Trie</h1>\\n<p>又被成为字典树或者前缀树，是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>\\n<p>有根树，每个节点包含以下字段：</p>\\n<ul>\\n<li>指向子节点的指针数组<code>children</code></li>\\n<li>布尔字段<code>isEnd</code>，表示该结点是否为字符串的结尾。</li>\\n</ul>\\n<h2> 插入字符串</h2>\\n<p>我们从字典树的根开始，插入字符串。对于当前字符对应的子节点，有两种情况：</p>\\n<ul>\\n<li>\\n<p>子节点存在。沿着指针移动到子节点，继续处理下一个字符。</p>\\n</li>\\n<li>\\n<p>子节点不存在。创建一个新的子节点，记录在 <code>children</code>数组的对应位置上，然后沿着指针移动到子节点，继续搜索下一个字符。</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};

import{_ as n,W as s,X as a,a2 as e}from"./framework-609d4fec.js";const t={},p=e(`<h1 id="vue3-组合式api" tabindex="-1"><a class="header-anchor" href="#vue3-组合式api" aria-hidden="true">#</a> Vue3 - 组合式api</h1><p>单文件组件：*.vue 文件格式</p><h2 id="组合式api" tabindex="-1"><a class="header-anchor" href="#组合式api" aria-hidden="true">#</a> 组合式API</h2><p><strong>选项的分离掩盖了潜在的逻辑问题</strong>。所以有了<strong>组合式api</strong></p><p>组合式API是一系列API的集合，使我们可以直接使用函数而不是声明选项的方式开发组件。</p><p>是一个概括性术语，涵盖以下方面的API:</p><ul><li>响应式API：例如 <code>ref()</code> 和 <code>reactive()</code>，使我们可以直接创建响应式状态、计算属性和侦听器。</li><li>生命周期钩子：例如 <code>onMounted </code> 和 <code>onUnMounted</code> ，可以直接在组件各生命周期阶段添加逻辑。</li><li>依赖注入：<code>provide</code> 和 <code>inject</code></li></ul><blockquote><p>是Vue3的内置功能，如果需要在Vue2中使用，可安装冠芳维护的插件 <code>@vue/composition-api</code>,在Vue3中，组合式API基本上都会配个 <code>&lt;script setup&gt;</code>语法在单文件组件中使用。</p><p><strong><u><code>setup</code>是一个标识，告诉Vue需要再编译时进行转换，来减少使用组合式API时的样板代码</u></strong>，例如，<code>&lt;script setup&gt;</code> 中的导入和顶层变量/函数都能够在模板中直接使用。</p></blockquote><p>例如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">// 响应式状态</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// 更改状态、触发更新的函数</span>
<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token punctuation">}</span>

<span class="token comment">// 生命周期钩子</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">计数器初始值为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击了：{{ count }} 次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合式api与选项式api" tabindex="-1"><a class="header-anchor" href="#组合式api与选项式api" aria-hidden="true">#</a> 组合式API与选项式API</h3><p>共同点：都能覆盖大部分的应用场景，同一个底层系统所提供的两套不同接口，实际上选项式API是在组合式API基础上实现的。</p><p>不同点：选项式API以组件实例为中心（this），将响应性相关的细节抽象出来，强制按照选项来组织代码，对初学者友好。组合式API的核心思想是 直接在函数作用域内定义响应式状态变量，并将多个函数中得到的状态组合起来处理复杂问题。这种形式更加灵活自由，要求对Vue的响应式系统有更深的理解才能高效使用。相应地，它的灵活性也使得组织和重用代码逻辑的模式变得更加强大。</p><h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h3><p>setup为使用组合式api的地方</p><h4 id="setup组件选项" tabindex="-1"><a class="header-anchor" href="#setup组件选项" aria-hidden="true">#</a> setup组件选项：</h4><p>新的setup选项在组件创建之前执行，一旦props被解析，就将作为组合式api的入口。</p><blockquote><p>在setup中应该避免使用this，因为它找不到组件实例。setup的调用发生在data property、computed property或methods被解析之前，所以在setup中无法获取</p></blockquote><p>setup是一个接收props和context的函数，我们将setup返回的所有内容都暴露给组件的其余部分（computed、methods、生命周期钩子）以及组件的模板。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/components/UserRepositories.vue</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> RepositoriesFilters<span class="token punctuation">,</span> RepositoriesSortBy<span class="token punctuation">,</span> RepositoriesList <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token comment">// { user: &#39;&#39; }</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 这里返回的任何内容都可以用于组件的其余部分</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 组件的“其余部分”</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="带ref的响应式变量" tabindex="-1"><a class="header-anchor" href="#带ref的响应式变量" aria-hidden="true">#</a> 带ref的响应式变量</h4><p>在vue3.0中，可以通过一个新的ref函数使得任何响应式变量在任何地方起作用。</p><blockquote><p>ref为我们的值创建了一个响应式引用。在整个组合式api中会经常使用引用的概念。</p></blockquote><h4 id="在setup内注册生命周期钩子" tabindex="-1"><a class="header-anchor" href="#在setup内注册生命周期钩子" aria-hidden="true">#</a> 在setup内注册生命周期钩子</h4><p>onMounted</p><p>这些函数接受一个回调，当钩子被组件调用时，该回调将被执行。</p><h5 id="watch响应式更改" tabindex="-1"><a class="header-anchor" href="#watch响应式更改" aria-hidden="true">#</a> watch响应式更改</h5><p>从vue导入的watch函数接收三个参数</p><ul><li>一个想要侦听的响应式引用或getter函数</li><li>一个回调</li><li>可选的配置选项</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/components/UserRepositories.vue \`setup\` function</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchUserRepositories <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/repositories&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> watch<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">// 在我们组件中</span>
<span class="token function">setup</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用 \`toRefs\` 创建对 \`props\` 中的 \`user\` property 的响应式引用</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>

  <span class="token keyword">const</span> repositories <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getUserRepositories</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新 \`prop.user\` 到 \`user.value\` 访问引用值</span>
    repositories<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchUserRepositories</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">onMounted</span><span class="token punctuation">(</span>getUserRepositories<span class="token punctuation">)</span>

  <span class="token comment">// 在 user prop 的响应式引用上设置一个侦听器</span>
  <span class="token function">watch</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> getUserRepositories<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    repositories<span class="token punctuation">,</span>
    getUserRepositories
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="独立的computed属性" tabindex="-1"><a class="header-anchor" href="#独立的computed属性" aria-hidden="true">#</a> 独立的computed属性</h5><p>与ref和watch类型，也可以使用导入的computed函数在vue组件外创建计算属性。</p>`,32),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","20230512-vue3学习之组合式api.html.vue"]]);export{r as default};

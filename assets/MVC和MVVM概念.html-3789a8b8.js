const e=JSON.parse('{"key":"v-128fd9d1","path":"/article/MVC%E5%92%8CMVVM%E6%A6%82%E5%BF%B5.html","title":"MVC和MVVM","lang":"zh-CN","frontmatter":{"title":"MVC和MVVM","date":"2022-09-03T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":"易混淆","tag":["软件设计"],"description":"MVC： 是Model（模型） View（视图） Controller（控制器）的缩写，是服务端分层开发的概念，本质上是用一种将数据、界面显示、业务逻辑分离的方法组织代码的软件开发设计典范。 （1）Model：数据层，负责操作数据库，执行数据的CRUD，职能单一。 （2）View：视图层，每当用户操作界面，就需要进行业务的处理，都会通过网络请求去服务端请求服务器。 （3）Controller：业务逻辑层，作为中间人负责数据层和视图层的交互。 总结：MVC模型中，Model、View，Controller三者是完全独立分开的，并且Model和View是完全隔离的，虽然Model不依赖于View，但是View是依赖于Model的，两者由Controller这个中间人负责交互。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/MVC%E5%92%8CMVVM%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"MVC和MVVM"}],["meta",{"property":"og:description","content":"MVC： 是Model（模型） View（视图） Controller（控制器）的缩写，是服务端分层开发的概念，本质上是用一种将数据、界面显示、业务逻辑分离的方法组织代码的软件开发设计典范。 （1）Model：数据层，负责操作数据库，执行数据的CRUD，职能单一。 （2）View：视图层，每当用户操作界面，就需要进行业务的处理，都会通过网络请求去服务端请求服务器。 （3）Controller：业务逻辑层，作为中间人负责数据层和视图层的交互。 总结：MVC模型中，Model、View，Controller三者是完全独立分开的，并且Model和View是完全隔离的，虽然Model不依赖于View，但是View是依赖于Model的，两者由Controller这个中间人负责交互。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-10-31T01:45:43.000Z"}],["meta",{"property":"article:tag","content":"软件设计"}],["meta",{"property":"article:published_time","content":"2022-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-31T01:45:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVC和MVVM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2022-10-31T01:45:43.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"MVC：","slug":"mvc","link":"#mvc","children":[]},{"level":2,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[]}],"git":{"createdTime":1663151617000,"updatedTime":1667180743000,"contributors":[{"name":"zhangting5","email":"zhangting5@xiaomi.xom","commits":2}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"article/MVC和MVVM概念.md","localizedDate":"2022年9月3日","excerpt":"<h2> MVC：</h2>\\n<p>是Model（模型） View（视图） Controller（控制器）的缩写，是服务端分层开发的概念，本质上是用一种将数据、界面显示、业务逻辑分离的方法组织代码的软件开发设计典范。\\n（1）Model：数据层，负责操作数据库，执行数据的CRUD，职能单一。\\n（2）View：视图层，每当用户操作界面，就需要进行业务的处理，都会通过网络请求去服务端请求服务器。\\n（3）Controller：业务逻辑层，作为中间人负责数据层和视图层的交互。\\n总结：MVC模型中，Model、View，Controller三者是完全独立分开的，并且Model和View是完全隔离的，虽然Model不依赖于View，但是View是依赖于Model的，两者由Controller这个中间人负责交互。</p>","autoDesc":true}');export{e as data};

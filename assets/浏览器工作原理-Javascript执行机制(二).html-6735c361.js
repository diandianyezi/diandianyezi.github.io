const t=JSON.parse('{"key":"v-5fbf09e4","path":"/article/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-Javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6(%E4%BA%8C).html","title":"浏览器工作原理-Javascript执行机制(一)","lang":"zh-CN","frontmatter":{"title":"浏览器工作原理-Javascript执行机制(一)","date":"2022-10-14T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":"JavaScript","tag":["浏览器"],"description":"调用栈 JavaScript引擎正是利用栈的这种结构来管理执行上下文的。在执行上下文创建好后，JavaScript引擎会将执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为执行上下文栈，又称调用栈。 调用栈是JavaScript引擎追踪函数执行的一个机制，当一次有多个函数被调用时，通过调用栈就能够追踪到哪个函数正在被执行以及各函数之间的调用关系。 在开发中如何利用好调用栈 浏览器查看调用栈信息 除了通过断点来查看调用栈，你还可以使用console.trace()来输出当前的函数调用关系，比如在示例代码中的add函数里面加上了console.trace()，你就可以看到控制台输出的结果，如下图：","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-Javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6(%E4%BA%8C).html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"浏览器工作原理-Javascript执行机制(一)"}],["meta",{"property":"og:description","content":"调用栈 JavaScript引擎正是利用栈的这种结构来管理执行上下文的。在执行上下文创建好后，JavaScript引擎会将执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为执行上下文栈，又称调用栈。 调用栈是JavaScript引擎追踪函数执行的一个机制，当一次有多个函数被调用时，通过调用栈就能够追踪到哪个函数正在被执行以及各函数之间的调用关系。 在开发中如何利用好调用栈 浏览器查看调用栈信息 除了通过断点来查看调用栈，你还可以使用console.trace()来输出当前的函数调用关系，比如在示例代码中的add函数里面加上了console.trace()，你就可以看到控制台输出的结果，如下图："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-14T10:39:09.000Z"}],["meta",{"property":"article:tag","content":"浏览器"}],["meta",{"property":"article:published_time","content":"2022-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-14T10:39:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器工作原理-Javascript执行机制(一)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-14T10:39:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"调用栈","slug":"调用栈","link":"#调用栈","children":[]},{"level":2,"title":"在开发中如何利用好调用栈","slug":"在开发中如何利用好调用栈","link":"#在开发中如何利用好调用栈","children":[]},{"level":2,"title":"栈溢出","slug":"栈溢出","link":"#栈溢出","children":[]},{"level":2,"title":"总结：","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1667189223000,"updatedTime":1668422349000,"contributors":[{"name":"zhangting5","email":"zhangting5@xiaomi.xom","commits":3}]},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"article/浏览器工作原理-Javascript执行机制(二).md","localizedDate":"2022年10月14日","excerpt":"<h2> 调用栈</h2>\\n<p>JavaScript引擎正是利用栈的这种结构来管理执行上下文的。在执行上下文创建好后，JavaScript引擎会将执行上下文压入栈中，通常把这种用来管理执行上下文的栈称为执行上下文栈，又称调用栈。</p>\\n<p>调用栈是JavaScript引擎追踪函数执行的一个机制，当一次有多个函数被调用时，通过调用栈就能够追踪到哪个函数正在被执行以及各函数之间的调用关系。</p>\\n<h2> 在开发中如何利用好调用栈</h2>\\n<ol>\\n<li>\\n<p>浏览器查看调用栈信息</p>\\n<p><img src=\\"https://static001.geekbang.org/resource/image/c0/a2/c0d303a289a535b87a6c445ba7f34fa2.png\\" alt=\\"\\"></p>\\n</li>\\n<li>\\n<p>除了通过断点来查看调用栈，你还可以使用console.trace()来输出当前的函数调用关系，比如在示例代码中的add函数里面加上了console.trace()，你就可以看到控制台输出的结果，如下图：</p>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};

import{_ as o,W as c,X as i,Z as a,a1 as n,$ as e,a2 as t,C as p}from"./framework-609d4fec.js";const l={},r=a("h2",{id:"配置babel",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#配置babel","aria-hidden":"true"},"#"),n(" 配置Babel")],-1),d={href:"https://www.babeljs.cn/docs/options",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.babeljs.cn/docs/config-files",target:"_blank",rel:"noopener noreferrer"},b=t('<h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><ul><li>monorepo模式</li><li>需要编译node_modules</li></ul><p>可以使用 <code>babel.config.json</code></p><ul><li>配置文件仅适用于项目某个部分</li></ul><p>可以使用<code>.babelrc.json</code> 文件</p><h4 id="babel-config-json" tabindex="-1"><a class="header-anchor" href="#babel-config-json" aria-hidden="true">#</a> babel.config.json</h4>',6),v={href:"https://www.babeljs.cn/docs/config-files#project-wide-configuration",target:"_blank",rel:"noopener noreferrer"},k=a("code",null,"babel.config.json",-1),h=a("h4",{id:"babelrc-json",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#babelrc-json","aria-hidden":"true"},"#"),n(" .babelrc.json")],-1),m={href:"https://www.babeljs.cn/docs/config-files#file-relative-configuration",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>还可以选择将<code>.babelrc.json</code>的配置信息作为 <code>babel</code>键的值 <code>添加到 </code>package.json\`文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-package&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;babel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> ... <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> ... <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用javascrript编写配置文件" tabindex="-1"><a class="header-anchor" href="#用javascrript编写配置文件" aria-hidden="true">#</a> 用JavaScrript编写配置文件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> presets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">// 可以调用 Nodejs的任何API</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&quot;ENV&quot;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;prod&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> presets<span class="token punctuation">,</span> plugins <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用cli-babel-cli" tabindex="-1"><a class="header-anchor" href="#使用cli-babel-cli" aria-hidden="true">#</a> 使用CLI(<code>@babel/cli</code>)</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>babel <span class="token parameter variable">--plugins</span> @babel/plugin-transform-arrow-functions script.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),g={href:"https://www.babeljs.cn/docs/babel-cli",target:"_blank",rel:"noopener noreferrer"},_=t(`<h3 id="使用api-babel-core" tabindex="-1"><a class="header-anchor" href="#使用api-babel-core" aria-hidden="true">#</a> 使用API(<code>@babel/core</code>)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/core&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transformSync</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/plugin-transform-arrow-functions&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j={href:"https://www.babeljs.cn/docs/babel-core",target:"_blank",rel:"noopener noreferrer"},w=t(`<h3 id="print-effective-configs" tabindex="-1"><a class="header-anchor" href="#print-effective-configs" aria-hidden="true">#</a> Print effective configs</h3><p>You can tell Babel to print effective configs on a given input path</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># *nix or WSL</span>
<span class="token assign-left variable">BABEL_SHOW_CONFIG_FOR</span><span class="token operator">=</span>./src/myComponent.jsx <span class="token function">npm</span> start

<span class="token comment"># or</span>
<span class="token variable">$env</span>:BABEL_SHOW_CONFIG_FOR <span class="token operator">=</span> <span class="token string">&quot;.\\src\\myComponent.jsx&quot;</span><span class="token punctuation">;</span> <span class="token function">npm</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Babel will print effective config sources ordered by ascending priority. Using the example above, the priority is:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>babel.config.json &lt; .babelrc &lt; programmatic options from @babel/cli

Copy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In other words, <code>babel.config.json</code> is overwritten by <code>.babelrc</code>, and <code>.babelrc</code> is overwritten by programmatic options.</p>`,6);function x(q,y){const s=p("ExternalLinkIcon");return c(),i("div",null,[r,a("p",null,[n("所有 Babel API "),a("a",d,[n("参数"),e(s)]),n(" 都可以被配置。然而，如果该参数需要用到 JavaScript 代码，你可能需要使用 JavaScript 代码版的 "),a("a",u,[n("配置文件"),e(s)]),n("。")]),b,a("p",null,[n("请参阅 "),a("a",v,[k,n(" 文档"),e(s)]),n(" 以了解更多关于配置参数的信息。")]),h,a("p",null,[n("请参阅 "),a("a",m,[n(".babelrc 文档"),e(s)]),n(" 以了解更多关于配置参数的信息。")]),f,a("p",null,[n("请参阅 "),a("a",g,[n("babel-cli 文档"),e(s)]),n(" 以了解更多关于配置参数的信息。")]),_,a("p",null,[n("请参阅 "),a("a",j,[n("babel-core 文档"),e(s)]),n(" 以了解更多关于配置参数的信息。")]),w])}const I=o(l,[["render",x],["__file","配置Babel.html.vue"]]);export{I as default};

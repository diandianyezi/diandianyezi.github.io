import{_ as n,W as s,X as a,a2 as p}from"./framework-609d4fec.js";const t={},e=p(`<ol><li><p>使用 <code>Object.hasOwn</code> 替代 <code>in</code> 操作符</p><p>检测对象上是否存在某个属性，一般会使用<code>in</code>操作符或<code>obj.hasOwnProperty</code>，但有各自的缺陷</p></li></ol><h4 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h4><pre><code>如果指定的属性位于对象或者原型链中，会返回\`true\`

\`\`\`js
const Person = function (age) {
  this.age = age
}
Person.prototype.name = &#39;fatfish&#39;

const p1 = new Person(24)
console.log(&#39;age&#39; in p1) // true 
console.log(&#39;name&#39; in p1) // true  注意这里
\`\`\`
</code></pre><h4 id="obj-hasownproperty" tabindex="-1"><a class="header-anchor" href="#obj-hasownproperty" aria-hidden="true">#</a> Obj.hasOwnProperty</h4><p>判断对象自身属性中是否具有对应的值，原型链上的属性不会读取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token punctuation">}</span>
    
    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;new name&#39;</span>
    <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// fasle  注意这里</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但在某些情况下，不安全</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="object-hasown" tabindex="-1"><a class="header-anchor" href="#object-hasown" aria-hidden="true">#</a> Object.hasOwn</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span>
    Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
    <span class="token keyword">let</span> object2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object2<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false  </span>
    <span class="token keyword">let</span> object3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object3<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>使用#声明私有属性</p><p>使用_表示私有属性，并不靠谱。还是会被外部修改</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
      #money<span class="token operator">=</span><span class="token number">1</span>
      <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
      <span class="token punctuation">}</span>
      <span class="token keyword">get</span> <span class="token function">money</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#money
      <span class="token punctuation">}</span>
      <span class="token keyword">set</span> <span class="token function">money</span> <span class="token punctuation">(</span><span class="token parameter">money</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>#money <span class="token operator">=</span> money
      <span class="token punctuation">}</span>
      <span class="token function">showMoney</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#money<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;fatfish&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>money<span class="token punctuation">)</span> <span class="token comment">// 1</span>
    <span class="token comment">// p1.#money = 2 // 没法从外部直接修改</span>
    p1<span class="token punctuation">.</span>money <span class="token operator">=</span> <span class="token number">2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>money<span class="token punctuation">)</span> <span class="token comment">// 2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>#money<span class="token punctuation">)</span> <span class="token comment">// Uncaught SyntaxError: Private field &#39;#money&#39; must be declared in an enclosing class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>超有用的“数字分隔符”</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> sixBillion <span class="token operator">=</span> <span class="token number">6000000000</span>
    <span class="token comment">// ❌ 难以阅读</span>
    <span class="token keyword">const</span> sixBillion2 <span class="token operator">=</span> <span class="token number">6000_000_000</span>
    <span class="token comment">// ✅ 更加易于阅读</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sixBillion2<span class="token punctuation">)</span> <span class="token comment">// 6000000000</span>
    <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">6000_000_000</span> <span class="token comment">// 6000001000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p><code>?.</code>替代&amp;&amp; 和三目运算符</p><blockquote><p><strong>?.</strong> 的一般用法</p><ol><li>obj?.prop 对象属性</li><li>obj?.[expr] 对象属性</li><li>func?.(...args) 执行函数</li></ol></blockquote></li><li><p>使用<code>BigInt</code>支持大数运算</p><p>JS中超过<code>Number.MAX_SAFE_INTEGER</code>的数字计算将是不安全的。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// true</span>
  <span class="token comment">// Math.pow(2, 53) =&gt; 9007199254740992</span>
  <span class="token comment">// Math.pow(2, 53) + 1 =&gt; 9007199254740992</span>
  
  <span class="token function">BigInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","2022-05-06-5个js特性.html.vue"]]);export{r as default};

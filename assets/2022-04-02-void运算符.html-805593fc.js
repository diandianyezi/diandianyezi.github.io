const n=JSON.parse(`{"key":"v-6d671ec8","path":"/article/2022-04-02-void%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"void运算符","lang":"zh-CN","frontmatter":{"title":"void运算符","date":"2022-04-02T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":["JavaScript"],"tag":["运算符","void"],"description":"void运算符 MDN介绍 The void operator evaluates the given expression and then returns undefined const output = void 1; console.log(output); // expected output: undefined void console.log('expression evaluated'); // expected output: \\"expression evaluated\\" void function iife() { console.log('iife is executed'); }(); // expected output: iife is executed void function test() { console.log('test function executed'); }; try { test(); } catch (e) { console.log('test function is not defined'); // expected output: \\"test function is not defined\\" }","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/2022-04-02-void%E8%BF%90%E7%AE%97%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"void运算符"}],["meta",{"property":"og:description","content":"void运算符 MDN介绍 The void operator evaluates the given expression and then returns undefined const output = void 1; console.log(output); // expected output: undefined void console.log('expression evaluated'); // expected output: \\"expression evaluated\\" void function iife() { console.log('iife is executed'); }(); // expected output: iife is executed void function test() { console.log('test function executed'); }; try { test(); } catch (e) { console.log('test function is not defined'); // expected output: \\"test function is not defined\\" }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-14T06:38:46.000Z"}],["meta",{"property":"article:tag","content":"运算符"}],["meta",{"property":"article:tag","content":"void"}],["meta",{"property":"article:published_time","content":"2022-04-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-14T06:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"void运算符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-14T06:38:46.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Syntax","slug":"syntax","link":"#syntax","children":[]}],"git":{"createdTime":1658976727000,"updatedTime":1689316726000,"contributors":[{"name":"diandian","email":"1092923594@qq.com","commits":1},{"name":"zhangting5","email":"zhangting5@xiaomi.xom","commits":1}]},"readingTime":{"minutes":2.07,"words":622},"filePathRelative":"article/2022-04-02-void运算符.md","localizedDate":"2022年4月2日","excerpt":"<h1> void运算符</h1>\\n<p><a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MDN介绍</a></p>\\n<p>The <code>void</code> operator evaluates the given <code>expression</code> and then returns <code>undefined</code></p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> output <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">void</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>output<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// expected output: undefined</span>\\n\\n<span class=\\"token keyword\\">void</span> console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'expression evaluated'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// expected output: \\"expression evaluated\\"</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">iife</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'iife is executed'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// expected output: iife is executed</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'test function executed'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'test function is not defined'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// expected output: \\"test function is not defined\\"</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};

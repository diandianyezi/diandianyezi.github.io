import{_ as n,W as s,X as a,a2 as e}from"./framework-609d4fec.js";const p={},t=e(`<h1 id="栈与队列" tabindex="-1"><a class="header-anchor" href="#栈与队列" aria-hidden="true">#</a> 栈与队列</h1><h2 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h2><p>栈（Stack）：是限定仅在表尾进行插入和删除操作的线性表。又称为后进先出（LIFO）的线性表。限制了插入和删除的位置。</p><p>栈顶：允许插入和删除的一端；</p><p>栈底：不允许插入和删除的一端；</p><p>空栈：不含任何数据元素的栈。</p><blockquote><p>注意：最先进栈的元素一定最后出栈</p></blockquote><h3 id="栈的抽象数据类型" tabindex="-1"><a class="header-anchor" href="#栈的抽象数据类型" aria-hidden="true">#</a> 栈的抽象数据类型</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ADT 栈<span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
Data
  同线性表
Operation
  <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">DestoryStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">ClearStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">StackEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">GetTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">Pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
  <span class="token function">Push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> ele<span class="token punctuation">)</span>
  <span class="token function">StackLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
endADT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="栈的顺序存储结构及实现" tabindex="-1"><a class="header-anchor" href="#栈的顺序存储结构及实现" aria-hidden="true">#</a> 栈的顺序存储结构及实现</h3><h4 id="栈的顺序存储结构" tabindex="-1"><a class="header-anchor" href="#栈的顺序存储结构" aria-hidden="true">#</a> 栈的顺序存储结构</h4><p>栈的结构定义</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> SElemType<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  SElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span> SqStack<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size <span class="token comment">// 栈的容量</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 进栈操作 时间复杂度O(1)</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">++</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> ele
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 时间复杂度O(1)</span>
  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">--</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="两栈共享空间" tabindex="-1"><a class="header-anchor" href="#两栈共享空间" aria-hidden="true">#</a> 两栈共享空间</h4><p>不存在线性表插入和删除时需要移动元素的问题。</p><p>大缺陷：必须实现确定数据存储空间大小。不然需要扩充容量。</p><p>数组有两个端点，两个栈有两个栈低，让一个栈的栈底为数组的始端，即下标为0处，另一个的栈底是数组的末端，即数组下标为数组长度为n-1处。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>top1 <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>top2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> stackNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token parameter">stackNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="栈的链式存储结构及实现" tabindex="-1"><a class="header-anchor" href="#栈的链式存储结构及实现" aria-hidden="true">#</a> 栈的链式存储结构及实现</h3><h4 id="栈的链式存储结构" tabindex="-1"><a class="header-anchor" href="#栈的链式存储结构" aria-hidden="true">#</a> 栈的链式存储结构</h4><p>链栈</p><p>栈顶在单链表头部</p><p>操作绝大部分与单链表类似，只是在插入和删除上特殊一些</p><p>进栈：头插法 O(1)</p><p>出栈：删除头结点，栈顶指针下移 O(1)</p><h3 id="栈的应用" tabindex="-1"><a class="header-anchor" href="#栈的应用" aria-hidden="true">#</a> 栈的应用</h3><h4 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h4><h4 id="四则运算表达式求职" tabindex="-1"><a class="header-anchor" href="#四则运算表达式求职" aria-hidden="true">#</a> 四则运算表达式求职</h4><p>后缀（逆波兰）表达法定义</p><p>后缀表达式计算</p><p>中缀表达式转后缀表达式：</p><h2 id="队列-queue-fifo" tabindex="-1"><a class="header-anchor" href="#队列-queue-fifo" aria-hidden="true">#</a> 队列 queue FIFO</h2><p>只允许在一端进行插入操作（队尾），而在另一端进行删除操作的线性表（队头）。</p><h3 id="队列的抽象数据类型" tabindex="-1"><a class="header-anchor" href="#队列的抽象数据类型" aria-hidden="true">#</a> 队列的抽象数据类型</h3><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/image-20230116144803306.png" alt="image-20230116144803306"></p><h3 id="循环队列" tabindex="-1"><a class="header-anchor" href="#循环队列" aria-hidden="true">#</a> 循环队列</h3><h3 id="队列顺序存储" tabindex="-1"><a class="header-anchor" href="#队列顺序存储" aria-hidden="true">#</a> 队列顺序存储</h3><p>front指针 第0下标位置</p><p>rear指针指向 队尾的下一位置</p><h4 id="循环队列-1" tabindex="-1"><a class="header-anchor" href="#循环队列-1" aria-hidden="true">#</a> 循环队列</h4><p>头尾相接的队列的顺序存储结构成为循环队列。</p><p>队列为空：<code>front === rear</code></p><p>队列为满：当只有一个空间时，队列满 <code> (rear + 1) % QueueSize === front</code></p><p>长度：<code>(rear - front + QueueSize) % QueueSize</code></p><h3 id="队列的链式存储结构" tabindex="-1"><a class="header-anchor" href="#队列的链式存储结构" aria-hidden="true">#</a> 队列的链式存储结构</h3><p>链队列</p>`,47),c=[t];function i(o,l){return s(),a("div",null,c)}const r=n(p,[["render",i],["__file","栈与队列.html.vue"]]);export{r as default};

const n=JSON.parse(`{"key":"v-7c3c6ca3","path":"/article/20230615-vue2%E4%B9%8B%E8%AE%B0%E5%BD%95.html","title":"Vue2知识查漏补缺","lang":"zh-CN","frontmatter":{"title":"Vue2知识查漏补缺","date":"2023-06-15T00:00:00.000Z","description":"Vue2之查漏补缺 Prop 可以传一个对象的所有property： post: { id: 1, title: 'My Journey with Vue' } &lt;blog-post v-bind=\\"post\\"&gt;&lt;/blog-post&gt; // 等价于 &lt;blog-post v-bind:id=\\"post.id\\" v-bind:title=\\"post.title\\" &gt;&lt;/blog-post&gt; prop是父到子的单向数据流 注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态。 验证prop的值 Vue.component('my-component', { props: { // 基础的类型检查 (\`null\` 和 \`undefined\` 会通过任何类型验证) propA: Number, // 多个可能的类型 propB: [String, Number], // 必填的字符串 propC: { type: String, required: true }, // 带有默认值的数字 propD: { type: Number, default: 100 }, // 带有默认值的对象 propE: { type: Object, // 对象或数组默认值必须从一个工厂函数获取 default: function () { return { message: 'hello' } } }, // 自定义验证函数 propF: { validator: function (value) { // 这个值必须匹配下列字符串中的一个 return ['success', 'warning', 'danger'].includes(value) } } } }) 类型检查： type可以是下列原生构造函数中的一个；type 还可以是一个自定义的构造函数，并且通过 instanceof 来进行检查确认。 String Number Boolean Array Object Date Function Symbol 非Prop的Attribute 组件可以接受任意的 attribute，而这些 attribute 会被添加到这个组件的根元素上 替换或者合并已有的Attribute：class 和style可以合并，其他会替换组件内里的属性值 禁用Attribute继承：如果你不希望组件的根元素继承 attribute，你可以在组件的选项中设置 inheritAttrs: false。 注意 inheritAttrs: false 选项不会影响 style 和 class 的绑定。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/20230615-vue2%E4%B9%8B%E8%AE%B0%E5%BD%95.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"Vue2知识查漏补缺"}],["meta",{"property":"og:description","content":"Vue2之查漏补缺 Prop 可以传一个对象的所有property： post: { id: 1, title: 'My Journey with Vue' } &lt;blog-post v-bind=\\"post\\"&gt;&lt;/blog-post&gt; // 等价于 &lt;blog-post v-bind:id=\\"post.id\\" v-bind:title=\\"post.title\\" &gt;&lt;/blog-post&gt; prop是父到子的单向数据流 注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态。 验证prop的值 Vue.component('my-component', { props: { // 基础的类型检查 (\`null\` 和 \`undefined\` 会通过任何类型验证) propA: Number, // 多个可能的类型 propB: [String, Number], // 必填的字符串 propC: { type: String, required: true }, // 带有默认值的数字 propD: { type: Number, default: 100 }, // 带有默认值的对象 propE: { type: Object, // 对象或数组默认值必须从一个工厂函数获取 default: function () { return { message: 'hello' } } }, // 自定义验证函数 propF: { validator: function (value) { // 这个值必须匹配下列字符串中的一个 return ['success', 'warning', 'danger'].includes(value) } } } }) 类型检查： type可以是下列原生构造函数中的一个；type 还可以是一个自定义的构造函数，并且通过 instanceof 来进行检查确认。 String Number Boolean Array Object Date Function Symbol 非Prop的Attribute 组件可以接受任意的 attribute，而这些 attribute 会被添加到这个组件的根元素上 替换或者合并已有的Attribute：class 和style可以合并，其他会替换组件内里的属性值 禁用Attribute继承：如果你不希望组件的根元素继承 attribute，你可以在组件的选项中设置 inheritAttrs: false。 注意 inheritAttrs: false 选项不会影响 style 和 class 的绑定。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-19T01:43:06.000Z"}],["meta",{"property":"article:published_time","content":"2023-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-19T01:43:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2知识查漏补缺\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-19T01:43:06.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Prop","slug":"prop","link":"#prop","children":[]},{"level":2,"title":"自定义事件","slug":"自定义事件","link":"#自定义事件","children":[]}],"git":{"createdTime":1687138986000,"updatedTime":1687138986000,"contributors":[{"name":"zhangting","email":"1092923594@qq.com","commits":1}]},"readingTime":{"minutes":2.02,"words":607},"filePathRelative":"article/20230615-vue2之记录.md","localizedDate":"2023年6月15日","excerpt":"<h1> Vue2之查漏补缺</h1>\\n<h2> Prop</h2>\\n<ol>\\n<li>\\n<p>可以传一个对象的所有<code>property</code>：</p>\\n<div class=\\"language-vue line-numbers-mode\\" data-ext=\\"vue\\"><pre class=\\"language-vue\\"><code>post: {\\n  id: 1,\\n  title: 'My Journey with Vue'\\n}\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>blog-post</span> <span class=\\"token attr-name\\">v-bind</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>post<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>blog-post</span><span class=\\"token punctuation\\">&gt;</span></span>\\n// 等价于\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>blog-post</span>\\n  <span class=\\"token attr-name\\"><span class=\\"token namespace\\">v-bind:</span>id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>post.id<span class=\\"token punctuation\\">\\"</span></span>\\n  <span class=\\"token attr-name\\"><span class=\\"token namespace\\">v-bind:</span>title</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>post.title<span class=\\"token punctuation\\">\\"</span></span>\\n<span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>blog-post</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>prop是父到子的单向数据流</p>\\n<blockquote>\\n<p>注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身<strong>将会</strong>影响到父组件的状态。</p>\\n</blockquote>\\n</li>\\n<li>\\n<p>验证prop的值</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>Vue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">component</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'my-component'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">props</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 基础的类型检查 (\`null\` 和 \`undefined\` 会通过任何类型验证)</span>\\n    <span class=\\"token literal-property property\\">propA</span><span class=\\"token operator\\">:</span> Number<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 多个可能的类型</span>\\n    <span class=\\"token literal-property property\\">propB</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>String<span class=\\"token punctuation\\">,</span> Number<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 必填的字符串</span>\\n    <span class=\\"token literal-property property\\">propC</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> String<span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">required</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 带有默认值的数字</span>\\n    <span class=\\"token literal-property property\\">propD</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> Number<span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token keyword\\">default</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">100</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 带有默认值的对象</span>\\n    <span class=\\"token literal-property property\\">propE</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> Object<span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token comment\\">// 对象或数组默认值必须从一个工厂函数获取</span>\\n      <span class=\\"token function-variable function\\">default</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">message</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'hello'</span> <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 自定义验证函数</span>\\n    <span class=\\"token literal-property property\\">propF</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function-variable function\\">validator</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 这个值必须匹配下列字符串中的一个</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'success'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'warning'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'danger'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">includes</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><strong>类型检查：</strong></p>\\n<p><code>type</code>可以是下列原生构造函数中的一个；<code>type</code> 还可以是一个自定义的构造函数，并且通过 <code>instanceof</code> 来进行检查确认。</p>\\n<ul>\\n<li><code>String</code></li>\\n<li><code>Number</code></li>\\n<li><code>Boolean</code></li>\\n<li><code>Array</code></li>\\n<li><code>Object</code></li>\\n<li><code>Date</code></li>\\n<li><code>Function</code></li>\\n<li><code>Symbol</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>非Prop的Attribute</p>\\n<p>组件可以接受任意的 attribute，而这些 attribute 会被添加到这个组件的根元素上</p>\\n<ul>\\n<li>\\n<p>替换或者合并已有的Attribute：class 和style可以合并，其他会替换组件内里的属性值</p>\\n</li>\\n<li>\\n<p>禁用Attribute继承：如果你<strong>不</strong>希望组件的根元素继承 attribute，你可以在组件的选项中设置 <code>inheritAttrs: false</code>。</p>\\n<blockquote>\\n<p>注意 <code>inheritAttrs: false</code> 选项<strong>不会</strong>影响 <code>style</code> 和 <code>class</code> 的绑定。</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}`);export{n as data};

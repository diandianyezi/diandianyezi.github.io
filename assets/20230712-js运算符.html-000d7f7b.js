import{_ as n,W as a,X as s,a2 as e}from"./framework-609d4fec.js";const t={},p=e(`<h1 id="js运算符" tabindex="-1"><a class="header-anchor" href="#js运算符" aria-hidden="true">#</a> js运算符</h1><h2 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h2><p>用于判断属性是否存在于对象中。</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>key <span class="token keyword">in</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>key:一个字符串类型或者 Symbol 类型的属性名或者数组索引（非 Symbol 类型将会强制转为字符串）。</p></li><li><p>obj: 检查（或其原型链）是否包含具有指定名称的属性的对象。</p></li><li><p>内置对象、自定义对象都可用in检测属性</p></li><li><p>值为<code>undefined</code>的对象属性，也可以判断</p></li><li><p>继承属性，也会返回<code>true</code></p></li></ul><h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h2><p>用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>target <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="检测类型" tabindex="-1"><a class="header-anchor" href="#检测类型" aria-hidden="true">#</a> 检测类型</h3><p>instanceof可以检测某个对象是否是另一个对象的实例。</p><p>instanceof可以检测父类型。</p><h3 id="模拟实现" tabindex="-1"><a class="header-anchor" href="#模拟实现" aria-hidden="true">#</a> 模拟实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    left <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete</h2><p>用于删除对象的某个属性。如果没有指向这个属性的引用了，它最终会被自动地释放。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">delete</span> object<span class="token punctuation">.</span>property<span class="token punctuation">;</span>
<span class="token keyword">delete</span> object<span class="token punctuation">[</span><span class="token string">&#39;property&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h3><p>对于所有情况都是true，除非属性是一个自己不可配置的属性，在这种情况下，非严格模式返回false。</p><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h3><ul><li>如果对象的原型链上有一个与待删除属性同名的属性，那么删除属性之后，对象会使用原型链上的那个属性（也就是说，<code>delete</code> 操作只会在自身的属性上起作用）</li><li>如果你试图删除的属性<strong>不存在</strong>，那么 <code>delete</code> 将不会起任何作用，但仍会返回 <code>true</code></li><li>任何使用 <code>var</code> 声明的属性不能从全局作用域或函数的作用域中删除。 <ul><li>这样的话，<code>delete</code> 操作不能删除任何在全局作用域中的函数（无论这个函数是来自于函数声明或函数表达式）</li><li>除了在全局作用域中的函数不能被删除，在对象中的函数是能够用 <code>delete</code> 操作删除的。</li></ul></li><li>任何用 <code>let</code> 或 <code>const</code> 声明的属性不能够从它被声明的作用域中删除。</li><li>不可设置的（Non-configurable）属性不能被移除。这意味着像 <code>Math</code>、<code>Array</code> 和 <code>Object</code> 等内置对象的属性以及使用 <code>Object.defineProperty()</code> 方法设置为不可设置的属性不能被删除。</li></ul><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h2><p><code>typeof</code> 操作符返回一个字符串，表示未经计算的操作数的类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> Math<span class="token punctuation">.</span><span class="token constant">LN2</span> <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token number">Infinity</span> <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> Symbol<span class="token punctuation">.</span>iterator <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 从一开始出现 JavaScript 就是这样的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="void" tabindex="-1"><a class="header-anchor" href="#void" aria-hidden="true">#</a> void</h2><p><code>void</code> 运算符能向期望一个表达式的值是 <code>undefined</code> 的地方插入会产生副作用的表达式。</p><ul><li>替代<code>undefined</code></li><li>客户端URL</li><li>阻止默认事件</li></ul><h2 id="字符串运算符" tabindex="-1"><a class="header-anchor" href="#字符串运算符" aria-hidden="true">#</a> 字符串运算符</h2><p>字符串运算符（+）用于将两个字符串值相连接。</p><h2 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h2><p>算术运算符使用数值（字面量或者变量）作为操作数进行运算并返回一个数值。</p><p>当操作数是浮点数时，这些运算符表现得跟它们在大多数编程语言中一样（特殊要注意的是，除零会产生 <code>Infinity</code> ）。</p><ul><li>** :指数运算符，计算base底数的exponent指数次方。</li></ul><h2 id="更新表达式" tabindex="-1"><a class="header-anchor" href="#更新表达式" aria-hidden="true">#</a> 更新表达式</h2><p><strong>前自增/自减运算符</strong> 和 <strong>后自增/自减运算符</strong>。</p><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><ul><li><p><strong>相同点</strong>：无论是前自增/前自减还是后自增/后自减，对于变量而言，没有区别，都是自身<code>+1</code>/<code>-1</code></p></li><li><p>不同点</p><p>：</p><ul><li>前自增/前自减：先自增/自减（变量自身），后赋值（将变量的值赋值给自增表达式的结果）</li><li>后自增/后自减：先赋值，后自增/自减</li></ul></li></ul><h4 id="为什么后自增后自减优先级很高却后操作" tabindex="-1"><a class="header-anchor" href="#为什么后自增后自减优先级很高却后操作" aria-hidden="true">#</a> 为什么后自增后自减优先级很高却后操作？</h4><p>前置操作返回加（减）1 的值，所以返回对象本身，这是左值（<code>++i</code>，先自增后操作）</p><p>后置操作为右值，同样对其操作数 <code>+1</code>/<code>-1</code>，但操作后产生操作数原来的、未修改的值为表达式的结果（可理解为 <code>i++</code> 为先操作，后自增）。实际上，由于后自增（减）优先级很高，因此会先自增（减），但在自增（减）前会创建一个副本，用来保存操作数原来的值，操作后会返回副本的值给表达式。</p><p>建议：只有在必要时才使用后置操作符，尽量使用前置操作符。因为前置操作需要做的工作更少，而后置操作必须先保存操作数原来的值，对于 int 型对象和指针，编译器会优化掉这项额外的工作，但对于更多复杂的迭代器类型，这种额外的工作可能会花费更大的代价。</p><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><p>将它右边操作数的值赋给它左边的操作数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">*</span> <span class="token operator">=</span> <span class="token operator">/=</span> <span class="token operator">%=</span> <span class="token operator">+=</span> <span class="token operator">-=</span> <span class="token operator">&lt;&lt;=</span> <span class="token operator">&gt;&gt;=</span> <span class="token operator">&gt;&gt;&gt;=</span> <span class="token operator">&amp;=</span> <span class="token operator">^=</span> <span class="token operator">|=</span> <span class="token operator">**=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="位移运算符" tabindex="-1"><a class="header-anchor" href="#位移运算符" aria-hidden="true">#</a> 位移运算符</h2><table><thead><tr><th>运算符</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>按位与</td><td><code>a &amp; b</code></td><td>在 <code>a</code> <code>b</code>的位表示中，每一个对应的位都为 1 则返回 1， 否则返回 0</td></tr><tr><td>按位或</td><td>\`a</td><td>b\`</td></tr><tr><td>按位异或</td><td><code>a ^ b</code></td><td>在<code>a</code> <code>b</code>的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0</td></tr><tr><td>按位非</td><td><code>~ a</code></td><td>反转被操作数的位</td></tr><tr><td>左移</td><td><code>a &lt;&lt; b</code></td><td>将 <code>a</code> 的二进制串向左移动 <code>b</code> 位,右边移入 0</td></tr><tr><td>算术右移</td><td><code>a &gt;&gt; b</code></td><td>把 <code>a</code> 的二进制表示向右移动 <code>b</code> 位，丢弃被移出的所有位</td></tr><tr><td>无符号右移</td><td><code>a &gt;&gt;&gt; b</code></td><td>把 <code>a</code> 的二进制表示向右移动 <code>b</code> 位，丢弃被移出的所有位，并把左边空出的位都填充为 0</td></tr></tbody></table><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h3><h4 id="取整" tabindex="-1"><a class="header-anchor" href="#取整" aria-hidden="true">#</a> 取整</h4><p>使用 ~、 &gt;&gt;、 &lt;&lt;、 &gt;&gt;&gt;、 | 来取整</p><h4 id="值交换" tabindex="-1"><a class="header-anchor" href="#值交换" aria-hidden="true">#</a> 值交换</h4><p>使用按位异或 ^ 来完成值交换</p><h4 id="十进制转二进制" tabindex="-1"><a class="header-anchor" href="#十进制转二进制" aria-hidden="true">#</a> 十进制转二进制</h4><h4 id="颜色值转换" tabindex="-1"><a class="header-anchor" href="#颜色值转换" aria-hidden="true">#</a> 颜色值转换</h4><p>使用&amp;、&gt;&gt;、|来完成RGB和16进制颜色值之间的转换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 16进制颜色值转RGB
 * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">hex</span> 16进制颜色字符串
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>     RGB颜色字符串
 */</span>
<span class="token keyword">function</span> <span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token parameter">hex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hexx <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> r <span class="token operator">=</span> hexx <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token punctuation">(</span>hexx <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> hexx <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * RGB颜色转16进制颜色
 * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">rgb</span> RGB进制颜色字符串
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>     16进制颜色字符串
 */</span>
<span class="token keyword">function</span> <span class="token function">RGBToHex</span><span class="token punctuation">(</span><span class="token parameter">rgb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> rgbArr <span class="token operator">=</span> rgb<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\d]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">(</span>rgbArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>rgbArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> rgbArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -------------------------------------------------</span>
<span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;#ffffff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgb(255,255,255)&#39;</span>
<span class="token function">RGBToHex</span><span class="token punctuation">(</span><span class="token string">&#39;rgb(255,255,255)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;#ffffff&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断正负" tabindex="-1"><a class="header-anchor" href="#判断正负" aria-hidden="true">#</a> 判断正负</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isPos</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">===</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">isPos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isPos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断符号是否相同" tabindex="-1"><a class="header-anchor" href="#判断符号是否相同" aria-hidden="true">#</a> 判断符号是否相同</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断奇偶" tabindex="-1"><a class="header-anchor" href="#判断奇偶" aria-hidden="true">#</a> 判断奇偶</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 偶数 &amp; 1 = 0</span>
<span class="token comment">// 奇数 &amp; 1 = 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","20230712-js运算符.html.vue"]]);export{d as default};

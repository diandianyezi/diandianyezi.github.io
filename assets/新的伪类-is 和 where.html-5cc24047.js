import{_ as e,W as s,X as n,a2 as a}from"./framework-609d4fec.js";const i={},c=a(`<h3 id="伪类函数-is-和-where" tabindex="-1"><a class="header-anchor" href="#伪类函数-is-和-where" aria-hidden="true">#</a> 伪类函数 :is() 和 :where()</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h1 &gt; b, h2 &gt; b, h3 &gt; b, h4 &gt; b, h5 &gt; b, h6 &gt; b</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">使用is 缩减代码并提高可读性
:is(h1,h2,h3,h4.h5.h6) &gt; b</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="浏览器兼容性" tabindex="-1"><a class="header-anchor" href="#浏览器兼容性" aria-hidden="true">#</a> 浏览器兼容性</h4><p><code>:is()</code> 由 <code>:match()</code> 改名而来，部分浏览器有其私有的 <code>:any()</code> 实现 <code>:is()</code> 的部分功能，在使用 <code>:is()</code> 之前，我们应该先了解其兼容性：</p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/202207252228643.png" alt=""></p><h4 id="is-和-where" tabindex="-1"><a class="header-anchor" href="#is-和-where" aria-hidden="true">#</a> :is() 和 :where()</h4><p><code>:is()</code> 作为一个伪类函数，其接收选择器列表作为参数，并选择该列表中任意一个选择器可以选择的元素，<code>:where()</code> 伪类函数与其功能相同，仅仅选择器权重不同。</p>`,7),t=[c];function o(d,r){return s(),n("div",null,t)}const l=e(i,[["render",o],["__file","新的伪类-is 和 where.html.vue"]]);export{l as default};

import{_ as t,W as o,X as p,Z as n,a1 as s,$ as c,a2 as a,C as l}from"./framework-609d4fec.js";const i={},u=a(`<h2 id="symbol类型" tabindex="-1"><a class="header-anchor" href="#symbol类型" aria-hidden="true">#</a> Symbol类型</h2><p>根据规范，只有两种原始类型可以用作对象属性键：</p><ul><li>字符串类型</li><li>symbol类型</li></ul><p>symbol能给我们带来什么呢？</p><h3 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> symbol</h3><p><code>symbol</code>值表示唯一的标识符。</p><p>可以使用<code>Symbol()</code>来创建这种类型的值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建时，我们可以给symbol一个描述，也称为symbol名，这在代码调试时非常有用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// id是描述为&quot;id&quot;的symbol</span>
<span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>symbol保证是唯一的，即使我们创建了许多具有相同描述的symbol，它们的值也是不同。描述只是一个标签，不影响任何东西。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> id2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>id1 <span class="token operator">===</span> id2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在哪里可以使用呢？</p><blockquote><p>symbol不会被自动转换为字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型错误：无法将 symbol 值转换为字符串。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果真的想显示一个symbol，我们需要在它上面调用<code>.toString()</code>，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(id)，现在它有效了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者获取symbol.description属性，只显示描述</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="隐藏-属性" tabindex="-1"><a class="header-anchor" href="#隐藏-属性" aria-hidden="true">#</a> “隐藏”属性</h3><p>symbol允许我们创建对象的&quot;隐藏&quot;属性，代码的任何其他部分都不能以外访问或重写这些属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 属于另一个代码</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

user<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> user<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我们可以使用 symbol 作为键来访问数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象字面量中的symbol" tabindex="-1"><a class="header-anchor" href="#对象字面量中的symbol" aria-hidden="true">#</a> 对象字面量中的symbol</h3><p>如果我们要在对象字面量{...}中使用symbol，则需要使用方括号把它括起来。</p><p>就像这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token comment">// 而不是 &quot;id&quot;：123</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),r={id:"symbol-在-for-in-中会被跳过",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#symbol-在-for-in-中会被跳过","aria-hidden":"true"},"#",-1),k={href:"https://zh.javascript.info/symbol#symbol-zai-forin-zhong-hui-bei-tiao-guo",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>symbol属性不参与<code>for...in</code>循环。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name, age（没有 symbol）</span>

<span class="token comment">// 使用 symbol 任务直接访问</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Direct: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Object.keys(user)</code>也会忽略它们，这是一般“隐藏符号属性”原则的一部分。</p><p>相反，Object.assign会同时复制字符串和symbol属性</p><h3 id="全局symbol" tabindex="-1"><a class="header-anchor" href="#全局symbol" aria-hidden="true">#</a> 全局Symbol</h3><p>要从注册表中读取（不存在则创建）symbol，请使用 <code>Symbol.for(key)</code>。</p><p>该调用会检查全局注册表，如果有一个描述为key的symbol，则返回该symbol，否则将创建一个新symbol，并通过给定的key将其存储在注册表的。</p><p>注册表内的 symbol 被称为 <strong>全局 symbol</strong>。如果我们想要一个应用程序范围内的 symbol，可以在代码中随处访问 —— 这就是它们的用途。</p><h3 id="symbol-keyfor" tabindex="-1"><a class="header-anchor" href="#symbol-keyfor" aria-hidden="true">#</a> symbol.keyFor</h3><p>对于全局symbol，不仅有Symbol.for(key)按名字返回一个symbol，还有一个反向调用Symbol.keyFor(sym)，它的作用完全反过来：通过全局symbol返回一个名字。</p><p><code>Symbol.keyFor</code> 内部使用全局 symbol 注册表来查找 symbol 的键。所以它不适用于非全局 symbol。如果 symbol 不是全局的，它将无法找到它并返回 <code>undefined</code>。</p><p>也就是说，任何 symbol 都具有 <code>description</code> 属性。</p>`,13);function b(v,y){const e=l("ExternalLinkIcon");return o(),p("div",null,[u,n("h3",r,[d,s(),n("a",k,[s("symbol 在 for…in 中会被跳过"),c(e)])]),m])}const g=t(i,[["render",b],["__file","symbol类型.html.vue"]]);export{g as default};

import{_ as t,W as p,X as l,Z as n,a1 as s,$ as e,a2 as o,C as i}from"./framework-609d4fec.js";const c={},r=o(`<p>本指南 展示如何将ES2015+语法的JS代码编译为能在浏览器上工作的代码，设计到新语法的转换和缺失特性的修补。</p><p>配置过程包括：</p><p>安装所需的包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/core @babel/cli @babel/preset-env 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建 <code>babel.config.json</code>文件（需要v7.8.0或更高版本），复制以下内容</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;edge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;17&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;firefox&quot;</span><span class="token operator">:</span> <span class="token string">&quot;60&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;chrome&quot;</span><span class="token operator">:</span> <span class="token string">&quot;67&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;safari&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11.1&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 只会包含你所引用的polyfill</span>
        <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.6.5&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),u={href:"https://www.babeljs.cn/docs/babel-preset-env",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"@babel/preset-env",-1),b=o(`<p>如果是 Babel旧版本，则文件名 为 <code>babel.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> presets <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> presets <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行此命令将 <code>src</code>目录下的所有代码编译到 <code>lib</code>目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/node_modules/.bin/babel src --out--dir lib

npx babel src --out-dir lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>你可以利用 npm@5.2.0 所自带的 npm 包运行器将 <code>./node_modules/.bin/babel</code> 命令缩短为 <code>npx babel</code></p></blockquote><p>由于我们没有指定任何代码转换功能，所以输出的代码将与输入的代码相同。</p><h3 id="cli命令行的基本用法" tabindex="-1"><a class="header-anchor" href="#cli命令行的基本用法" aria-hidden="true">#</a> CLI命令行的基本用法</h3><h4 id="核心库" tabindex="-1"><a class="header-anchor" href="#核心库" aria-hidden="true">#</a> 核心库</h4>`,8),v={href:"https://www.babeljs.cn/docs/babel-core",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"@babel/core",-1),m=n("h4",{id:"cli命令行工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cli命令行工具","aria-hidden":"true"},"#"),s(" CLI命令行工具")],-1),h={href:"https://www.babeljs.cn/docs/babel-cli",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"@babel/cli",-1),q=o(`<h3 id="插件和预设" tabindex="-1"><a class="header-anchor" href="#插件和预设" aria-hidden="true">#</a> 插件和预设</h3><p>代码转换功能以插件形式 出现，插件就是小型的JavaScript程序，用于指导Babel如何对代码进行转换。</p><p>将ES2015+语法转换为ES5语法，可以使用诸如 <code>@babel/plugin-transform-arrow-functions</code>之类的官方插件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx babel src --out-dir lib <span class="token parameter variable">--plugins</span><span class="token operator">=</span>@babel/plugin-transform-arrow-functions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在可以将代码中所有的箭头函数，转换为ES5兼容的函数表达式了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token comment">// converted to</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们代码中仍然有其他新特性，可以使用一个 &quot;preset&quot; 即一组预先设定的插件。</p><p>当前我们可以使用一个 <code>env</code> 的preset</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx babel src --out-dir lib <span class="token parameter variable">--presets</span><span class="token operator">=</span>env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不进行任何配置，上述 preset 所包含的插件将支持所有最新的 JavaScript （ES2015、ES2016 等）特性。但是 preset 也是支持参数的。接下来我们看看另一种传递参数的方法：配置文件。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3>`,11),f={href:"https://www.babeljs.cn/docs/configuration",target:"_blank",rel:"noopener noreferrer"},_=o(`<p>首先，创建一个 <code>babel.config.json</code>文件，包含以下内容：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;edge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;17&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;firefox&quot;</span><span class="token operator">:</span> <span class="token string">&quot;60&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;chrome&quot;</span><span class="token operator">:</span> <span class="token string">&quot;67&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;safari&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11.1&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>名为 <code>env</code>的preset只会为目标浏览器中没有的功能加载转换插件。</p><h3 id="polyfill" tabindex="-1"><a class="header-anchor" href="#polyfill" aria-hidden="true">#</a> Polyfill</h3><blockquote><p>从Babel 7.4.0 开始，这个软件包已经不建议使用了，建议直接包含 <code>core-js/stable</code>（用于模拟ECMAScript功能）。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> <span class="token string">&#39;core-js/stable&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),y=n("code",null,"@babel/core",-1),j=n("code",null,"@babel/plugin-transform-regenerator",-1),x=n("code",null,"7.18.0",-1),w={href:"https://github.com/facebook/regenerator/tree/main/packages/runtime",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"regenerator runtime",-1),S=n("code",null,"@babel/preset-env",-1),E=n("code",null,'useBuiltIns: "usage"',-1),I=n("code",null,"@babel/plugin-transform-runtime",-1),C={href:"https://www.babeljs.cn/docs/babel-polyfill",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/zloirock/core-js",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"String",-1),V={href:"https://www.babeljs.cn/docs/babel-plugin-transform-runtime",target:"_blank",rel:"noopener noreferrer"},z=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> @babel/polyfill
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意!</p><p>使用 <code>--save</code> 参数而不是 <code>--save-dev</code>，因为这是一个需要在你的源码之前运行的 polyfill。</p></blockquote><p><code>env</code>预设的 <code>useBuiltIns</code>参数设置为 <code>usage</code>时，Babel会检查所有代码，以便查找目标环境中缺失的功能，将必须的polyfill包含进来。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;edge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;17&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;firefox&quot;</span><span class="token operator">:</span> <span class="token string">&quot;60&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;chrome&quot;</span><span class="token operator">:</span> <span class="token string">&quot;67&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;safari&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11.1&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们不使用将 <code>&quot;useBuiltIns&quot;</code> 参数设置为 <code>&quot;usage&quot;</code> （默认值是 &quot;false&quot;）的 <code>env</code> 预设的话，那么我们必须在所有代码之前利用 require 加载 <em>一次</em> 完整的 polyfill</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;useBuiltIns&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;entry&quot;</span>,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),A={href:"https://github.com/zloirock/core-js",target:"_blank",rel:"noopener noreferrer"},M=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">import</span> <span class="token string">&quot;core-js/stable&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><code>@babel/cli</code> 可以在终端运行Babel</p><p><code>@babel/polyfill</code> 来模拟所有新的 JavaScript 功能(babel 7.4.0以上不支持了，而是使用 <code>core-js</code>)，而 <code>env</code> preset 只对我们所使用的并且目标浏览器中缺失的功能进行代码转换和加载 polyfill。</p>`,4);function P(T,W){const a=i("ExternalLinkIcon");return p(),l("div",null,[r,n("p",null,[s("参见 "),n("a",u,[s("此处"),e(a)]),s(" 以了解 "),d,s(" 可接受哪些参数。")]),b,n("p",null,[s("Babel的核心功能包含在"),n("a",v,[k,e(a)])]),m,n("p",null,[n("a",h,[g,e(a)]),s(" 是一个能够从终端（命令行）使用的工具。")]),q,n("p",null,[s("可通过阅读 "),n("a",f,[s("配置 Babel"),e(a)]),s(" 的深入指南以了解更多信息。")]),_,n("blockquote",null,[n("p",null,[s("If you are compiling generators or async function to ES5, and you are using a version of "),y,s(" or "),j,s(" older than "),x,s(", you must also load the "),n("a",w,[B,e(a)]),s(" package. It is automatically loaded when using "),S,s("'s "),E,s(" option or "),I,s(".")])]),n("p",null,[n("a",C,[s("@babel/polyfill"),e(a)]),s(" 模块包含 "),n("a",J,[s("core-js"),e(a)]),s(" 和一个自定义的 "),n("a",L,[s("regenerator runtime"),e(a)]),s(" 来模拟完整的 ES2015+ 环境。")]),n("p",null,[s("polyfill 将添加到全局范围（global scope）和类似 "),N,s(" 这样的原生原型（native prototypes）中。如果不希望污染全局，可以使用 "),n("a",V,[s("transform runtime"),e(a)]),s(" 插件，如果需要确切地知道所需要的polyfill功能，可以直接从 core-js获取。")]),z,n("p",null,[s("然后需要 import "),n("a",A,[s("core-js"),e(a)])]),M])}const Z=t(c,[["render",P],["__file","使用指南.html.vue"]]);export{Z as default};

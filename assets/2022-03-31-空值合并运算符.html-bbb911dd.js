import{_ as e,W as d,X as c,a2 as o}from"./framework-609d4fec.js";const a={},i=o('<h1 id="空值合并运算符" tabindex="-1"><a class="header-anchor" href="#空值合并运算符" aria-hidden="true">#</a> 空值合并运算符 ??</h1><p>空值合并运算符的写法为 两个<code>??</code></p><p><code>a ?? b</code> 的结果是：</p><ul><li>如果 <code>a</code> 是已定义的，则结果为 <code>a</code>，</li><li>如果 <code>a</code> 不是已定义的，则结果为 <code>b</code>。</li></ul><h2 id="与-比较" tabindex="-1"><a class="header-anchor" href="#与-比较" aria-hidden="true">#</a> 与<code>||</code>比较</h2><p>或运算符<code>||</code>可以与<code>？？</code>运算符相同的方式使用</p><p>区别在于</p><ul><li>|| 返回的是第一个真值</li><li>？？返回第一个已定义（不为null 也不为undefined）的值</li></ul><blockquote><p>||<code>无法区分</code>false<code>、</code>0<code>、空字符串 </code>&quot;&quot;<code>和</code>null/undefined</p></blockquote><h2 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h2><p>??优先级与||相同，这意味着，就像 <code>||</code> 一样，空值合并运算符在 <code>=</code> 和 <code>?</code> 运算前计算，但在大多数其他运算（例如 <code>+</code> 和 <code>*</code>）之后计算。</p><h2 id="与-或-一起使用" tabindex="-1"><a class="header-anchor" href="#与-或-一起使用" aria-hidden="true">#</a> ?? 与 &amp;&amp; 或 || 一起使用</h2><p>出于安全原因，JavaScript 禁止将 <code>??</code> 运算符与 <code>&amp;&amp;</code> 和 <code>||</code> 运算符一起使用，除非使用括号明确指定了优先级。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><p>空值合并运算符??提供了一种从列表中选择第一个”已定义“值的简便方式。</p><p>它被用于为变量分配默认值：</p></li><li><p>??运算符的优先级非常低，仅高于?和=</p></li><li><p>如果没有明确添加括号，不能将其与|| 或&amp;&amp;一起使用</p></li></ul>',15),l=[i];function r(h,t){return d(),c("div",null,l)}const p=e(a,[["render",r],["__file","2022-03-31-空值合并运算符.html.vue"]]);export{p as default};

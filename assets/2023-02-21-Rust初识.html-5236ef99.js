import{_ as n,W as s,X as a,a2 as e}from"./framework-609d4fec.js";const t={},p=e(`<h1 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h1><h2 id="开始" tabindex="-1"><a class="header-anchor" href="#开始" aria-hidden="true">#</a> 开始</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># mac 环境下</span>
<span class="token function">curl</span> <span class="token parameter variable">--proto</span> <span class="token string">&#39;=https&#39;</span> <span class="token parameter variable">--tlsv1.2</span> <span class="token parameter variable">-sSf</span> https://sh.rustup.rs <span class="token operator">|</span> <span class="token function">sh</span>

rustup <span class="token parameter variable">--version</span>
<span class="token comment"># rustup 1.25.1 (bb60b1e89 2022-07-12)</span>
<span class="token comment"># info: This is the version for the rustup toolchain manager, not the rustc # # compiler.</span>
<span class="token comment"># info: The currently active \`rustc\` version is \`rustc 1.62.0 (a8314ef7d 2022-06-27)\`</span>
<span class="token function">cargo</span> <span class="token parameter variable">--version</span>
<span class="token comment"># cargo 1.62.0 (a748cf5a3 2022-06-08)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该安装命令会下载并执行一个脚本来安装<code>rustup</code>工具，进而安装最新的<code>Rust</code>版本。</p><p>上面的安装过程会自动将<code>Rust</code>工具链添加到环境变量PATH中，并在下一次登录终端时生效。如果想立即生效，可以执行如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> <span class="token environment constant">$HOME</span>/.cargo/env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更新与卸载" tabindex="-1"><a class="header-anchor" href="#更新与卸载" aria-hidden="true">#</a> 更新与卸载</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rustup update // 更新
rustup self uninstall // 卸载
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello world</h3><p>新建一个main.rs 文件，写以下内容</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行命令 <code>rustc main.rs</code> 会编译该文件 生成一个 <code>main</code>的可执行二进制文件，然后执行 <code>./main</code> 会在终端输出 <code>hello world</code>；</p><p><code>Rust</code>中所有以!结尾的调用都意味着正在使用一个宏而不是普通函数。</p><h4 id="运行与编译是两个不同的步骤" tabindex="-1"><a class="header-anchor" href="#运行与编译是两个不同的步骤" aria-hidden="true">#</a> 运行与编译是两个不同的步骤</h4><p><code>Rust</code>是一种预编译语言，这意味着当你编译完<code>Rust</code>程序之后，便可以将可执行文件交付于其他人，并运行在没有安装<code>Rust</code>的环境中</p><h3 id="cargo" tabindex="-1"><a class="header-anchor" href="#cargo" aria-hidden="true">#</a> cargo</h3><h4 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h4><p><code>Rust</code>工具链内置的构建系统及包管理器。对于复杂项目，使用 <code>cargo</code> 管理包和项目构建。</p><p>Cargo handles a lot of tasks for you, <strong>such as building your code, downloading the libraries your code depends on, and building those libraries.</strong> (We call the libraries that your code needs <em>dependencies</em>.)</p><ul><li><code>cargo new project-name</code> 生成一个新项目</li><li><code>cargo build</code> 构建项目，可执行程序生成在路径target/debug下，首次使用cargo构建的话，会创建一个cargo.lock的文件，记录了当前项目所有依赖库的具体版本号。</li><li><code>cargo run</code> 构建和运行项目</li><li><code>cargo run</code> 构建项目，检查错误，不会产出二进制执行文件</li><li><code>cargo check</code> 快速检查当前的代码是否可以通过编译，而不需要花费额外的时间去真正生成可执行程序。</li><li>构建产生的文件在 <code>target/debug</code>目录下</li><li><code>cargo doc --open</code>查阅本地文档</li></ul><h4 id="release构建" tabindex="-1"><a class="header-anchor" href="#release构建" aria-hidden="true">#</a> release构建</h4><p><code>cargo build --release</code></p><p>构建的时候会做一些优化，会在<code>target/release</code>文件下产出执行文件，这些优化使得项目运行更快，也会花比较长的时间编译。所以会有两种编译配置：一种是开发使用，一个是生产使用</p><h4 id="cargo-toml文件" tabindex="-1"><a class="header-anchor" href="#cargo-toml文件" aria-hidden="true">#</a> cargo.toml文件</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token punctuation">[</span>package<span class="token punctuation">]</span>
name <span class="token operator">=</span> <span class="token string">&quot;hello_cargo&quot;</span>
version <span class="token operator">=</span> <span class="token string">&quot;0.1.0&quot;</span>
authors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Your Name &lt;you@example.com&gt;&quot;</span><span class="token punctuation">]</span>
edition <span class="token operator">=</span> <span class="token string">&quot;2018&quot;</span>

<span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>.toml</code> 文件是以 TOML（Tom&#39;s Obvious, Minimal Languag）作为标准的配置格式。</p></blockquote><ol><li><code>[package]</code>：一个区域标签，表名接下来的语句会被用于配置当前的程序包。</li><li>随后的3行语句提供了<code>Cargo</code>编译这个程序时需要的配置信息，分别是程序名、版本号及作者信息。</li><li><code>[dependencies]</code>：一个区域标签，表示随后的区域会被用来声明项目的依赖。</li></ol><h2 id="第一个项目" tabindex="-1"><a class="header-anchor" href="#第一个项目" aria-hidden="true">#</a> 第一个项目</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// main.rs</span>

<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span> <span class="token comment">// 引入标准库的io模块</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess the number!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Please input your guess.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> guess <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&amp;意味着当前的参数是一个引用。 </span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;You guessed: {}&quot;</span><span class="token punctuation">,</span> guess<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为默认行为，Rust会将预导入（<code>prelude</code>）模块内的条目自动引入每一段程序的作用域中，它包含了一小部分相当常用的类型。如果需要的类型不在预导入模块内，那么我们就必须使用<code>use</code>语句来显式地进行导入声明。</p><p><code>String::new</code> 中的 <code>::</code> 语法表明<code>new</code> 是<code>String</code>类型的一个关联函数(<code>associated function</code>)。针对类型本身来定义关联函数，在某些语言中也被成为静态方法（<code>static method</code>）。</p><p><code>io::stdin</code>：<code>stdin</code>函数会返回类型<code>std::io::Stdin</code>的实例。</p><p><code>read_line</code>方法会将当前用户输入的数据不加区分地存储在字符串中，所以它需要接收一个传入的字符串作为参数。返回一个<code>io::Result</code>值。</p><p><code>Result</code>是一个枚举类型。枚举类型由一系列固定的值组合而成，这些值被称作枚举的变体。拥有 <code>Ok</code>和 <code>Err</code>两个变体。<code>Ok</code>表示操作成功，附带代码产生的结果值，<code>Err</code>变体则表明当前的操作执行失败。并大附带引发失败的具体原因。</p><h3 id="生成一个保密数字" tabindex="-1"><a class="header-anchor" href="#生成一个保密数字" aria-hidden="true">#</a> 生成一个保密数字</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> std<span class="token punctuation">:</span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token lifetime-annotation symbol">&#39;Guess</span> the <span class="token macro property">number!</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> secret_number <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 包含下限不包含上限</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The secret number is:{}&quot;</span><span class="token punctuation">,</span> secret_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> guess <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;You guessed:{}&quot;</span><span class="token punctuation">,</span> guess<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>// 比较两个数的大小</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The secret number is:{}&quot;</span><span class="token punctuation">,</span> secret_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">loop</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;please input your guess.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secret_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Less</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Too small&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Greater</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Too big!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Equal</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token class-name">You</span> <span class="token macro property">win!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理输入</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">expext</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> guess<span class="token punctuation">:</span><span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">,</span>
  <span class="token constant">ERR</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">continue</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整代码</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess the number!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">let</span> secret_number <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Please input your guess.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
        <span class="token keyword">let</span> <span class="token keyword">mut</span> guess <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
        <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        
        <span class="token keyword">let</span> guess<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Ok</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">,</span>
            <span class="token class-name">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">continue</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
                
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;You guessed: {}&quot;</span><span class="token punctuation">,</span> guess<span class="token punctuation">)</span><span class="token punctuation">;</span>
                
        <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secret_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Less</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Too small!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Greater</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Too big!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Equal</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;You win!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","2023-02-21-Rust初识.html.vue"]]);export{r as default};

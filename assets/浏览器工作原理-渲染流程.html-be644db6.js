const e=JSON.parse('{"key":"v-58807d25","path":"/article/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.html","title":"浏览器工作原理-浏览器进程（一）","lang":"zh-CN","frontmatter":{"title":"浏览器工作原理-浏览器进程（一）","date":"2022-10-14T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":"JavaScript","tag":["浏览器"],"description":"渲染流程 按照渲染的时间顺序，流水线可分为如下几个子阶段：构建DOM树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成。 构建DOM树 由于浏览器无法直接理解和使用HTML，所以需要将HTML转换为浏览器能够理解的结构-DOM树。 输入内容为一个简单的HTML文件，然后经由HTML解析器解析，最终输出树状结构的DOM。 样式计算 计算出DOM节点中每个元素的具体样式。大体分为三步来完成： 把CSS转换为浏览器能够理解的结构（styleSheets：可查询和修改）； 转换样式表中的属性值，使其标准化；例如: color: blue; font-weight: 700; 计算出DOM树中每个节点的具体样式 涉及到CSS的继承规则和层叠规则 CSS继承：会根据DOM节点的继承关系来合理计算节点样式。 CSS层叠：是CSS的一个基本特征，它是一个定义了如何合并来自多个源的属性值的算法。 最终输出的内容是每个DOM节点的样式，并被保存在ComputedStyle的结构内。在Chrome开发者模式下，元素的最终样式在computed标签下。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"浏览器工作原理-浏览器进程（一）"}],["meta",{"property":"og:description","content":"渲染流程 按照渲染的时间顺序，流水线可分为如下几个子阶段：构建DOM树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成。 构建DOM树 由于浏览器无法直接理解和使用HTML，所以需要将HTML转换为浏览器能够理解的结构-DOM树。 输入内容为一个简单的HTML文件，然后经由HTML解析器解析，最终输出树状结构的DOM。 样式计算 计算出DOM节点中每个元素的具体样式。大体分为三步来完成： 把CSS转换为浏览器能够理解的结构（styleSheets：可查询和修改）； 转换样式表中的属性值，使其标准化；例如: color: blue; font-weight: 700; 计算出DOM树中每个节点的具体样式 涉及到CSS的继承规则和层叠规则 CSS继承：会根据DOM节点的继承关系来合理计算节点样式。 CSS层叠：是CSS的一个基本特征，它是一个定义了如何合并来自多个源的属性值的算法。 最终输出的内容是每个DOM节点的样式，并被保存在ComputedStyle的结构内。在Chrome开发者模式下，元素的最终样式在computed标签下。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-10-31T04:07:03.000Z"}],["meta",{"property":"article:tag","content":"浏览器"}],["meta",{"property":"article:published_time","content":"2022-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-31T04:07:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器工作原理-浏览器进程（一）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2022-10-31T04:07:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"渲染流程","slug":"渲染流程","link":"#渲染流程","children":[{"level":3,"title":"构建DOM树","slug":"构建dom树","link":"#构建dom树","children":[]},{"level":3,"title":"样式计算","slug":"样式计算","link":"#样式计算","children":[]},{"level":3,"title":"布局阶段","slug":"布局阶段","link":"#布局阶段","children":[]}]},{"level":2,"title":"分层","slug":"分层","link":"#分层","children":[]},{"level":2,"title":"图层绘制","slug":"图层绘制","link":"#图层绘制","children":[]},{"level":2,"title":"栅格化（raster）操作","slug":"栅格化-raster-操作","link":"#栅格化-raster-操作","children":[]},{"level":2,"title":"合成和显示","slug":"合成和显示","link":"#合成和显示","children":[]},{"level":2,"title":"渲染流程总结","slug":"渲染流程总结","link":"#渲染流程总结","children":[]},{"level":2,"title":"相关概念","slug":"相关概念","link":"#相关概念","children":[{"level":3,"title":"1. 更新了元素的几何属性 重排","slug":"_1-更新了元素的几何属性-重排","link":"#_1-更新了元素的几何属性-重排","children":[]},{"level":3,"title":"2. 更新元素的绘制属性 重绘","slug":"_2-更新元素的绘制属性-重绘","link":"#_2-更新元素的绘制属性-重绘","children":[]},{"level":3,"title":"3. 直接合成阶段","slug":"_3-直接合成阶段","link":"#_3-直接合成阶段","children":[]}]}],"git":{"createdTime":1667189223000,"updatedTime":1667189223000,"contributors":[{"name":"zhangting5","email":"zhangting5@xiaomi.xom","commits":1}]},"readingTime":{"minutes":7.51,"words":2254},"filePathRelative":"article/浏览器工作原理-渲染流程.md","localizedDate":"2022年10月14日","excerpt":"<h2> 渲染流程</h2>\\n<p>按照渲染的时间顺序，流水线可分为如下几个子阶段：构建DOM树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成。</p>\\n<h3> 构建DOM树</h3>\\n<p>由于浏览器无法直接理解和使用HTML，所以需要将HTML转换为浏览器能够理解的结构-DOM树。</p>\\n<p>输入内容为一个简单的HTML文件，然后经由HTML解析器解析，最终输出树状结构的DOM。</p>\\n<h3> 样式计算</h3>\\n<p>计算出DOM节点中每个元素的具体样式。大体分为三步来完成：</p>\\n<ol>\\n<li>\\n<p>把CSS转换为浏览器能够理解的结构（styleSheets：可查询和修改）；</p>\\n</li>\\n<li>\\n<p>转换样式表中的属性值，使其标准化；例如: color: blue; font-weight: 700;</p>\\n</li>\\n<li>\\n<p>计算出DOM树中每个节点的具体样式</p>\\n<p>涉及到<strong>CSS的继承规则和层叠规则</strong></p>\\n<p>CSS继承：会根据DOM节点的继承关系来合理计算节点样式。</p>\\n<p>CSS层叠：是CSS的一个基本特征，它是一个定义了如何合并来自多个源的属性值的算法。</p>\\n<p>最终输出的内容是每个DOM节点的样式，并被保存在ComputedStyle的结构内。在Chrome开发者模式下，元素的最终样式在computed标签下。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};

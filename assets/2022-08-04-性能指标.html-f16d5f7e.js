import{_ as e,W as a,X as t,a2 as i}from"./framework-609d4fec.js";const r={},n=i('<h1 id="性能监控" tabindex="-1"><a class="header-anchor" href="#性能监控" aria-hidden="true">#</a> 性能监控</h1><h2 id="监控什么" tabindex="-1"><a class="header-anchor" href="#监控什么" aria-hidden="true">#</a> 监控什么？</h2><p>有哪些具体的指标呢？</p><p>Google开发者提出了一种RAIL模型来衡量应用性能，即：Response、Animation、Idle、Load，分别代表着web应用声明周期的四个不同方面。并指出最好的性能指标是：100ms内响应用户输入；动画或者滚动需在10ms内产生下一帧；最大优化空闲时间；页面加载时长不超过5秒。</p><p>RAIL是一种以用户为中心的性能模型。每个网络应用均具有与其声明周期有关的四个不同方面，且这些方面以不同的方式影响着性能：</p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/202207011445065.png" alt="image-20220701144557994"></p><p>可以转化为三个方面来看：响应速度、页面稳定性、外部服务调用</p><ul><li>响应速度：页面初始访问速度+交互响应速度；</li><li>页面稳定性：页面出错率；</li><li>外部服务调用：网络请求访问速度。</li></ul><h3 id="_1-页面访问速度-白屏、首屏时间、可交互时间" tabindex="-1"><a class="header-anchor" href="#_1-页面访问速度-白屏、首屏时间、可交互时间" aria-hidden="true">#</a> 1. 页面访问速度：白屏、首屏时间、可交互时间</h3><p>google开发者提出的几个性能指标</p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/006tNbRwgy1gah51k3lg8j31bi0gg45d.jpg" alt="1"></p><table><thead><tr><th>The Experience</th><th>The Metric</th></tr></thead><tbody><tr><td>is it happening?</td><td>First Paint(FP)/First Contentful Paint(FCP)</td></tr><tr><td>Is it useful?</td><td>First Meaningful Paint(FMP)/Hero Element Timing</td></tr><tr><td>Is it usable?</td><td>Time to Interactive(TTI)</td></tr><tr><td>Is it delightful?</td><td>Long Tasks(technically the absence of long tasks)</td></tr></tbody></table><h4 id="_1-fp-and-fcp" tabindex="-1"><a class="header-anchor" href="#_1-fp-and-fcp" aria-hidden="true">#</a> 1). FP and FCP</h4><p>首次渲染、首次有内容的渲染</p><p>这两个指标浏览器已经标准化了，从performance的The Paint Timing API 可以获取到，一般来说两个时间相同，但也有情况下两者不同。</p><h4 id="_2-first-meaningful-paint-and-hero-element-timing" tabindex="-1"><a class="header-anchor" href="#_2-first-meaningful-paint-and-hero-element-timing" aria-hidden="true">#</a> 2). First Meaningful paint and hero element timing</h4><p>首次有意义的渲染、页面关键元素</p><p>我们假设当一个网页的 DOM 结构发生剧烈的变化的时候，就是这个网页主要内容出现的时候，那么在这样的一个时间点上，就是首次有意义的渲染。这个指标浏览器还没有规范，毕竟很难统一一个标准来定义网站的主体内容。 google lighthouse 定义的 first meaningful paint： https://docs.google.com/document/d/1BR94tJdZLsin5poeet0XoTW60M0SjvOJQttKT-JK8HI/view</p><h4 id="_3-time-to-interactive" tabindex="-1"><a class="header-anchor" href="#_3-time-to-interactive" aria-hidden="true">#</a> 3). Time to interactive</h4><p>可交互时间</p><h4 id="_4-长任务" tabindex="-1"><a class="header-anchor" href="#_4-长任务" aria-hidden="true">#</a> 4). 长任务</h4><p>浏览器是单线程的，如果长任务过多，那必然会影响用户响应时长。好的应用需要最大化空闲时间，以保证能最快响应用户的输入。</p><h3 id="_2-页面稳定性-页面出错情况" tabindex="-1"><a class="header-anchor" href="#_2-页面稳定性-页面出错情况" aria-hidden="true">#</a> 2. 页面稳定性：页面出错情况</h3><p>资源加载错误</p><p>JS执行出错</p><h3 id="_3-外部服务调用" tabindex="-1"><a class="header-anchor" href="#_3-外部服务调用" aria-hidden="true">#</a> 3. 外部服务调用</h3><p>CGI耗时</p><p>CGI成功率</p><p>CDN资源耗时</p><h2 id="监控的分类" tabindex="-1"><a class="header-anchor" href="#监控的分类" aria-hidden="true">#</a> 监控的分类？</h2><p>web性能监控可分为两类，一类是合成监控（Synthetic Monitoring，SYN），另一类是真实用户监控（Real User Monitoring，RUM）</p><h3 id="合成监控" tabindex="-1"><a class="header-anchor" href="#合成监控" aria-hidden="true">#</a> 合成监控</h3><p>合成监控是采用web浏览器模拟器来加载网页，通过模拟终端用户可能得操作来采集对应的性能指标，最后输出一个网站性能报告。例如 LightHouse、PhantomJS等</p><p>Lighthouse是google一个开源的自动化工具，运行Lighthouse的方式有两种：一种是作为Chrome扩展程序运行，另一种是作为命令行工具运行。通过命令行工具可以将 Lighthouse 集成到持续集成系统。</p><p>优点： 无侵入性、简单快捷；</p><p>缺点：不是真实用户访问情况，只是Monitoring，没法考虑到登录情况，对于需要登录的页面没法监控。</p><h3 id="真实用户监控" tabindex="-1"><a class="header-anchor" href="#真实用户监控" aria-hidden="true">#</a> 真实用户监控</h3><p>真实用户监控是一种被动监控技术，是一种应用服务，被监控的 web 应用通过 sdk 等方式接入该服务，将真实的用户访问、交互等性能指标数据收集上报、通过数据清洗加工后形成性能分析报表。例如 FrontJs、oneapm、Datadog 等。</p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/202207011526507.png" alt="image-20220701152639466"></p><h2 id="performance分析" tabindex="-1"><a class="header-anchor" href="#performance分析" aria-hidden="true">#</a> performance分析</h2><p>浏览器提供的 performance api，这也是性能监控数据的主要来源。</p><p>performance 提供高精度的时间戳，精度可达纳秒级别，且不会随操作系统时间设置的影响。 目前市场上的支持情况：主流浏览器都支持，大可放心使用。</p><h1 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档：</h1><p>http://www.alloyteam.com/2020/01/14184/</p><p>https://juejin.cn/post/6950824230653001758</p>',45),h=[n];function d(p,o){return a(),t("div",null,h)}const c=e(r,[["render",d],["__file","2022-08-04-性能指标.html.vue"]]);export{c as default};

const n=JSON.parse(`{"key":"v-4a1c2116","path":"/article/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97.html","title":"优先队列","lang":"zh-CN","frontmatter":{"title":"优先队列","description":"优先队列 优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列通常使用“堆”实现。 操作 优先队列至少需要支持下述操作： 插入带优先级的元素 取出具有最高 优先级的元素 查看最高优先级的元素 class Heap { constructor(compare, _values, _left) { if(typeof comparr !== 'function') { throw new Error('Heap constructor expects a compare function!') } this._compare = compare; this._nodes = Array.isArray(_values ? _values : []); this._leaf = leaf || null } _hasLeftChild(parentIndex) { const leftChildIndex = 2 * parentIndex + 1; return leftChildIndex &lt;= this.size(); } _hasRightChild(parentIndex) { const rightChildIndex = 2 * parentIndex + 2; return rightChildIndex &lt;= this.size(); } _comparenAt(i, j) { return this._compare(this._nodes[i], this._nodes[j]); } _swap(i, j) { const temp = this._nodes[i] this._nodes[i] = this._nodes[j]; this._nodes[j] = temp; } _shouldSwap(parentIndex, childIndex) { if(parentIndex &lt; 0 || parentIndex &gt;= this.size()) { return false; } if(childIndex &lt; o || childIndex &gt;= this.size()) { return false; } return this._compareAt(parentIndex, childIndex) &gt; 0; } _compareChildrenOf(parentIndex) { if(!this._hasLeftChild(parentIndex) &amp;&amp; !this._hasRightChild(parentIndex)) { return -1 } const leftChildIndex = parentIndex * 2 + 1; const rightChildIndex = parentIndex * 2 + 2; if(!this._hasRightChild(parentIndex)) { return leftChildIndex } if(!this._hasLeftChild(parentIndex)) { return rightChildIndex } const compare = this,_compareAt(leftChildIndex, rightChildIndex); return comparen &gt; 0 ? rightChildIndex : leftChildIndex; } _compareChildBefore(index, leftChildIndex, rightChildIndex) { const compare = this._compareAt(rightChildIndex, leftChildIndex); if(compare &lt;= 0 &amp;&amp; rightChildIndex &lt; index) { return rightChildIndex; } return leftChildIndex; } _heapifyUp(startIndex) { } _heapifyDown(startIndex) { } _heapifyDownUntil(index) { } insert(value) { this._nodes.push(value); this._heapifyUp(this.size() - 1); if(this._leaf === null || this._compare(value, this._leaf) &gt; 0) { this._leaf = value; } return this; } size() { return this._nodes.length; } }","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"优先队列"}],["meta",{"property":"og:description","content":"优先队列 优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列通常使用“堆”实现。 操作 优先队列至少需要支持下述操作： 插入带优先级的元素 取出具有最高 优先级的元素 查看最高优先级的元素 class Heap { constructor(compare, _values, _left) { if(typeof comparr !== 'function') { throw new Error('Heap constructor expects a compare function!') } this._compare = compare; this._nodes = Array.isArray(_values ? _values : []); this._leaf = leaf || null } _hasLeftChild(parentIndex) { const leftChildIndex = 2 * parentIndex + 1; return leftChildIndex &lt;= this.size(); } _hasRightChild(parentIndex) { const rightChildIndex = 2 * parentIndex + 2; return rightChildIndex &lt;= this.size(); } _comparenAt(i, j) { return this._compare(this._nodes[i], this._nodes[j]); } _swap(i, j) { const temp = this._nodes[i] this._nodes[i] = this._nodes[j]; this._nodes[j] = temp; } _shouldSwap(parentIndex, childIndex) { if(parentIndex &lt; 0 || parentIndex &gt;= this.size()) { return false; } if(childIndex &lt; o || childIndex &gt;= this.size()) { return false; } return this._compareAt(parentIndex, childIndex) &gt; 0; } _compareChildrenOf(parentIndex) { if(!this._hasLeftChild(parentIndex) &amp;&amp; !this._hasRightChild(parentIndex)) { return -1 } const leftChildIndex = parentIndex * 2 + 1; const rightChildIndex = parentIndex * 2 + 2; if(!this._hasRightChild(parentIndex)) { return leftChildIndex } if(!this._hasLeftChild(parentIndex)) { return rightChildIndex } const compare = this,_compareAt(leftChildIndex, rightChildIndex); return comparen &gt; 0 ? rightChildIndex : leftChildIndex; } _compareChildBefore(index, leftChildIndex, rightChildIndex) { const compare = this._compareAt(rightChildIndex, leftChildIndex); if(compare &lt;= 0 &amp;&amp; rightChildIndex &lt; index) { return rightChildIndex; } return leftChildIndex; } _heapifyUp(startIndex) { } _heapifyDown(startIndex) { } _heapifyDownUntil(index) { } insert(value) { this._nodes.push(value); this._heapifyUp(this.size() - 1); if(this._leaf === null || this._compare(value, this._leaf) &gt; 0) { this._leaf = value; } return this; } size() { return this._nodes.length; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T13:30:52.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T13:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"优先队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-15T13:30:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]}],"git":{"createdTime":1678887052000,"updatedTime":1678887052000,"contributors":[{"name":"zhangting","email":"1092923594@qq.com","commits":1}]},"readingTime":{"minutes":1.01,"words":302},"filePathRelative":"article/优先队列.md","localizedDate":"2023年3月15日","excerpt":"<h1> 优先队列</h1>\\n<p>优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列通常使用“堆”实现。</p>\\n<h2> 操作</h2>\\n<p>优先队列至少需要支持下述操作：</p>\\n<ul>\\n<li>插入带优先级的元素</li>\\n<li>取出具有最高 优先级的元素</li>\\n<li>查看最高优先级的元素</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Heap</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">compare<span class=\\"token punctuation\\">,</span> _values<span class=\\"token punctuation\\">,</span> _left</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> comparr <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'function'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Heap constructor expects a compare function!'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_compare <span class=\\"token operator\\">=</span> compare<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes <span class=\\"token operator\\">=</span> Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>_values <span class=\\"token operator\\">?</span> _values <span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_leaf <span class=\\"token operator\\">=</span> leaf <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">null</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_hasLeftChild</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">parentIndex</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> leftChildIndex <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> parentIndex <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> leftChildIndex <span class=\\"token operator\\">&lt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_hasRightChild</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">parentIndex</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> rightChildIndex <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> parentIndex <span class=\\"token operator\\">+</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> rightChildIndex <span class=\\"token operator\\">&lt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_comparenAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">i<span class=\\"token punctuation\\">,</span> j</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_compare</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_swap</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">i<span class=\\"token punctuation\\">,</span> j</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> temp <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> temp<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_shouldSwap</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">parentIndex<span class=\\"token punctuation\\">,</span> childIndex</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>parentIndex <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">||</span> parentIndex <span class=\\"token operator\\">&gt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>childIndex <span class=\\"token operator\\">&lt;</span> o <span class=\\"token operator\\">||</span> childIndex <span class=\\"token operator\\">&gt;=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_compareAt</span><span class=\\"token punctuation\\">(</span>parentIndex<span class=\\"token punctuation\\">,</span> childIndex<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_compareChildrenOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">parentIndex</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_hasLeftChild</span><span class=\\"token punctuation\\">(</span>parentIndex<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_hasRightChild</span><span class=\\"token punctuation\\">(</span>parentIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> leftChildIndex <span class=\\"token operator\\">=</span> parentIndex <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">const</span> rightChildIndex <span class=\\"token operator\\">=</span> parentIndex <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_hasRightChild</span><span class=\\"token punctuation\\">(</span>parentIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> leftChildIndex\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_hasLeftChild</span><span class=\\"token punctuation\\">(</span>parentIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> rightChildIndex\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">const</span> compare <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">_compareAt</span><span class=\\"token punctuation\\">(</span>leftChildIndex<span class=\\"token punctuation\\">,</span> rightChildIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> comparen <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> rightChildIndex <span class=\\"token operator\\">:</span> leftChildIndex<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_compareChildBefore</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">index<span class=\\"token punctuation\\">,</span> leftChildIndex<span class=\\"token punctuation\\">,</span> rightChildIndex</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> compare <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_compareAt</span><span class=\\"token punctuation\\">(</span>rightChildIndex<span class=\\"token punctuation\\">,</span> leftChildIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>compare <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> rightChildIndex <span class=\\"token operator\\">&lt;</span> index<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> rightChildIndex<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> leftChildIndex<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_heapifyUp</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">startIndex</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    \\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_heapifyDown</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">startIndex</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    \\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">_heapifyDownUntil</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">index</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    \\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_heapifyUp</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_leaf <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">_compare</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_leaf<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_leaf <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>_nodes<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};

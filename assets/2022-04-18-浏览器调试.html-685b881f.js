import{_ as e,W as i,X as a,a2 as o}from"./framework-609d4fec.js";const t={},r=o('<h2 id="在浏览器中调试" tabindex="-1"><a class="header-anchor" href="#在浏览器中调试" aria-hidden="true">#</a> 在浏览器中调试</h2><p>完整手册 https://developer.chrome.com/docs/devtools/</p><p>https://zh.javascript.info/debugging-chrome</p><h3 id="条件断点" tabindex="-1"><a class="header-anchor" href="#条件断点" aria-hidden="true">#</a> 条件断点：</h3><p>在行号<strong>右键单击</strong> 允许创建一个 条件断点，只有当给定的表达式为真时才会被触发。<strong>当我们需要在特定的变量值或参数的情况下暂停程序执行时，这种调试方法就很有用了。</strong></p><p><img src="https://raw.githubusercontent.com/diandianyezi/typora-images/master/img/image-20220418093552427.png" alt="image-20220418093552427"></p><p>右侧的信息下拉列表（箭头之处的地方）</p><ol><li><p><code>Watch</code> <strong>察看</strong> - 显示任意表达式的当前值。</p></li><li><p><code>Call Stack</code> <strong>调用栈</strong> - 显示嵌套的调用链</p><p>此时，调试器正在 <code>hello()</code> 的调用链中，被 <code>index.html</code> 中的一个脚本调用（这里没有函数，因此显示 “anonymous”）</p><p>如果你点击了一个堆栈项，调试器将跳到对应的代码处，并且还可以查看其所有变量。</p></li><li><p><code>Scope</code> <strong>作用域</strong> - 显示当前的变量</p><p><code>Local</code> 显示当前函数中的变量</p><p><code>Global</code>显示全局变量（不在任何函数中）</p></li></ol><h3 id="跟踪执行" tabindex="-1"><a class="header-anchor" href="#跟踪执行" aria-hidden="true">#</a> 跟踪执行</h3><ul><li>恢复 Resume</li><li>下一步 Step：会忽略异步行为</li><li>跨步 Step Over</li><li>步入 Step into ：<strong>会进入到异步代码中并等待</strong>。</li><li>步出 Step out：<strong>继续执行到当前函数的末尾</strong>。继续执行代码并停止在当前函数的最后一行。当我们使用 偶然地进入到一个嵌套调用，但是我们又对这个函数不感兴趣时，我们想要尽可能的继续执行到最后的时候是非常方便的。</li><li>启用/禁用所有的断点</li><li>启用/禁用出现错误时自动暂停脚本执行。</li></ul><blockquote><p>Continue to here</p><p>在代码中的某一行上右键，在显示的关联菜单中点击这个选项。</p><p>当那你想到向前移动很多步到某一行为止，但是又懒得设置一个断点时非常的方便。</p></blockquote><h3 id="device-mode" tabindex="-1"><a class="header-anchor" href="#device-mode" aria-hidden="true">#</a> Device Mode</h3><p>提供以下功能：</p><ol><li>模拟移动设备视口</li><li>网络节流</li><li>CPU节流</li><li>模拟定位</li><li>设置方向</li></ol><p>无法模拟 手机CPU架构，可使用Remote Debugging</p><h4 id="simulate-a-mobile-viewport" tabindex="-1"><a class="header-anchor" href="#simulate-a-mobile-viewport" aria-hidden="true">#</a> Simulate a mobile viewport</h4><h5 id="show-media-queries" tabindex="-1"><a class="header-anchor" href="#show-media-queries" aria-hidden="true">#</a> show Media Queries</h5><h5 id="device-type" tabindex="-1"><a class="header-anchor" href="#device-type" aria-hidden="true">#</a> Device Type</h5><h5 id="mobile-device-viewport-mode" tabindex="-1"><a class="header-anchor" href="#mobile-device-viewport-mode" aria-hidden="true">#</a> Mobile Device Viewport Mode</h5><h5 id="rotate-landscape-orientation" tabindex="-1"><a class="header-anchor" href="#rotate-landscape-orientation" aria-hidden="true">#</a> Rotate :Landscape orientation</h5><h5 id="throttle-the-network-and-cpu" tabindex="-1"><a class="header-anchor" href="#throttle-the-network-and-cpu" aria-hidden="true">#</a> Throttle the network and CPU</h5><p>Mid-tier mobile（快3G CPU节流） 比正常慢4倍</p><p>low-end mobile（慢3G CPU节流） 比正常慢6倍</p>',23),d=[r];function n(h,l){return i(),a("div",null,d)}const s=e(t,[["render",n],["__file","2022-04-18-浏览器调试.html.vue"]]);export{s as default};

const n=JSON.parse('{"key":"v-5b0028f7","path":"/article/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97.html","title":"栈与队列","lang":"zh-CN","frontmatter":{"title":"栈与队列","description":"栈与队列 栈 栈（Stack）：是限定仅在表尾进行插入和删除操作的线性表。又称为后进先出（LIFO）的线性表。限制了插入和删除的位置。 栈顶：允许插入和删除的一端； 栈底：不允许插入和删除的一端； 空栈：不含任何数据元素的栈。 注意：最先进栈的元素一定最后出栈 栈的抽象数据类型 ADT 栈(stack) Data 同线性表 Operation InitStack() DestoryStack() ClearStack() StackEmpty() GetTop() Pop(s) Push(s, ele) StackLength() endADT","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"栈与队列"}],["meta",{"property":"og:description","content":"栈与队列 栈 栈（Stack）：是限定仅在表尾进行插入和删除操作的线性表。又称为后进先出（LIFO）的线性表。限制了插入和删除的位置。 栈顶：允许插入和删除的一端； 栈底：不允许插入和删除的一端； 空栈：不含任何数据元素的栈。 注意：最先进栈的元素一定最后出栈 栈的抽象数据类型 ADT 栈(stack) Data 同线性表 Operation InitStack() DestoryStack() ClearStack() StackEmpty() GetTop() Pop(s) Push(s, ele) StackLength() endADT"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T13:30:52.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T13:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈与队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-15T13:30:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"栈","slug":"栈","link":"#栈","children":[{"level":3,"title":"栈的抽象数据类型","slug":"栈的抽象数据类型","link":"#栈的抽象数据类型","children":[]},{"level":3,"title":"栈的顺序存储结构及实现","slug":"栈的顺序存储结构及实现","link":"#栈的顺序存储结构及实现","children":[]},{"level":3,"title":"栈的链式存储结构及实现","slug":"栈的链式存储结构及实现","link":"#栈的链式存储结构及实现","children":[]},{"level":3,"title":"栈的应用","slug":"栈的应用","link":"#栈的应用","children":[]}]},{"level":2,"title":"队列 queue FIFO","slug":"队列-queue-fifo","link":"#队列-queue-fifo","children":[{"level":3,"title":"队列的抽象数据类型","slug":"队列的抽象数据类型","link":"#队列的抽象数据类型","children":[]},{"level":3,"title":"循环队列","slug":"循环队列","link":"#循环队列","children":[]},{"level":3,"title":"队列顺序存储","slug":"队列顺序存储","link":"#队列顺序存储","children":[]},{"level":3,"title":"队列的链式存储结构","slug":"队列的链式存储结构","link":"#队列的链式存储结构","children":[]}]}],"git":{"createdTime":1678887052000,"updatedTime":1678887052000,"contributors":[{"name":"zhangting","email":"1092923594@qq.com","commits":1}]},"readingTime":{"minutes":2.12,"words":635},"filePathRelative":"article/栈与队列.md","localizedDate":"2023年3月15日","excerpt":"<h1> 栈与队列</h1>\\n<h2> 栈</h2>\\n<p>栈（Stack）：是限定仅在表尾进行插入和删除操作的线性表。又称为后进先出（LIFO）的线性表。限制了插入和删除的位置。</p>\\n<p>栈顶：允许插入和删除的一端；</p>\\n<p>栈底：不允许插入和删除的一端；</p>\\n<p>空栈：不含任何数据元素的栈。</p>\\n<blockquote>\\n<p>注意：最先进栈的元素一定最后出栈</p>\\n</blockquote>\\n<h3> 栈的抽象数据类型</h3>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code>ADT 栈<span class=\\"token punctuation\\">(</span>stack<span class=\\"token punctuation\\">)</span>\\nData\\n  同线性表\\nOperation\\n  <span class=\\"token function\\">InitStack</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">DestoryStack</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">ClearStack</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">StackEmpty</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">GetTop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">Pop</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">Push</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">,</span> ele<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function\\">StackLength</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\nendADT\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

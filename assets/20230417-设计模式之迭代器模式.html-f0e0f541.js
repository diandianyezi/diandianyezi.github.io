const n=JSON.parse('{"key":"v-04093dfe","path":"/article/20230417-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"常见设计模式之迭代器模式","lang":"zh-CN","frontmatter":{"title":"常见设计模式之迭代器模式","date":"2023-04-17T00:00:00.000Z","description":"迭代器模式 什么是迭代器 迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。 迭代器模式可以将迭代的过程从业务逻辑中分离出来。 目前大部分语言都内置了迭代器 实现自己的迭代器 const each function(arr, callback) { for(let i = 0; i &lt; arr.length; i++) { callback.call(arr[i], i, arr[i]); } } each([1,2,3], function(i, n) { alert([i, n]) })","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/20230417-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"常见设计模式之迭代器模式"}],["meta",{"property":"og:description","content":"迭代器模式 什么是迭代器 迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。 迭代器模式可以将迭代的过程从业务逻辑中分离出来。 目前大部分语言都内置了迭代器 实现自己的迭代器 const each function(arr, callback) { for(let i = 0; i &lt; arr.length; i++) { callback.call(arr[i], i, arr[i]); } } each([1,2,3], function(i, n) { alert([i, n]) })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-04T11:46:10.000Z"}],["meta",{"property":"article:published_time","content":"2023-04-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-04T11:46:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见设计模式之迭代器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-04T11:46:10.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是迭代器","slug":"什么是迭代器","link":"#什么是迭代器","children":[{"level":3,"title":"实现自己的迭代器","slug":"实现自己的迭代器","link":"#实现自己的迭代器","children":[]},{"level":3,"title":"内部迭代器和外部迭代器","slug":"内部迭代器和外部迭代器","link":"#内部迭代器和外部迭代器","children":[]},{"level":3,"title":"迭代类数组对象和字面量对象","slug":"迭代类数组对象和字面量对象","link":"#迭代类数组对象和字面量对象","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]}],"git":{"createdTime":1683200078000,"updatedTime":1683200770000,"contributors":[{"name":"diandian","email":"1092923594@qq.com","commits":2}]},"readingTime":{"minutes":0.93,"words":280},"filePathRelative":"article/20230417-设计模式之迭代器模式.md","localizedDate":"2023年4月17日","excerpt":"<h1> 迭代器模式</h1>\\n<h2> 什么是迭代器</h2>\\n<p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>\\n<p>迭代器模式可以将迭代的过程从业务逻辑中分离出来。</p>\\n<p>目前大部分语言都内置了迭代器</p>\\n<h3> 实现自己的迭代器</h3>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> each  <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arr<span class=\\"token punctuation\\">,</span> callback</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">callback</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">each</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">i<span class=\\"token punctuation\\">,</span> n</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

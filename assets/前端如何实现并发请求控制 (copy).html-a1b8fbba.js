const n=JSON.parse('{"key":"v-35b77d16","path":"/article/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E6%8E%A7%E5%88%B6%20(copy).html","title":"如何实现并发请求控制","lang":"zh-CN","frontmatter":{"title":"如何实现并发请求控制","date":"2022-11-15T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":"Nodejs","tag":["并发"],"description":"场景 实现一个并发请求函数concurrencyRequest(urls, maxNum)，要求如下： 要求最大并发数 maxNum； 每当有一个请求返回，就留下一个空位，可以增加新的请求； 所有请求完成后，结果按照urls库暖白的顺序一次打出（发送请求的函数可以直接使用fetch即可）。 // 方法一 const concurrencyRequest = (urls, maxNum) =&gt; { return new Promise((resolve) =&gt; { if (urls.length === 0) { resolve([]); return } const results = []; let next = 0; let count = 0; async function request() { if (next === urls.length) return; const i = next; const url = urls[next]; console.info(url); try { const res = await fetch(url); results[i] = res; } catch (err) { results[i] = err; } finally { count++; if (count === urls.length) { console.info(\'完成了\'); resolve(results) } request(); } } // maxNum和urls.length取最小进行调用 const times = Math.min(maxNum, urls.length); for (let i = 0; i &lt; times; i++) { request(); } }) } const urls = []; for (let i = 1; i &lt;= 20; i++) { urls.push(`https://jsonplaceholder.typicode.com/todos/${i}`); } concurrencyRequest(urls, 3).then(res =&gt; { console.log(res); }) // 使用promise.all const sendRequest = (tasks, max, callback) =&gt; { let index = 0; let together = new Array(max).fill(null); const result = []; together = together.map(() =&gt; { return new Promise((resolve) =&gt; { const run = () =&gt; { if (index &gt;= tasks.length) { resolve(); return; } let cur = index; let task = tasks[index++]; task().then(res =&gt; { result[cur] = res; run(); }).catch((err) =&gt; { result[cur] = err; run(); }) } run(); }) }) Promise.all(together).then(() =&gt; callback(result)); } sendRequest(tasks, 3, (res) =&gt; { console.info(res) })","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E6%8E%A7%E5%88%B6%20(copy).html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"如何实现并发请求控制"}],["meta",{"property":"og:description","content":"场景 实现一个并发请求函数concurrencyRequest(urls, maxNum)，要求如下： 要求最大并发数 maxNum； 每当有一个请求返回，就留下一个空位，可以增加新的请求； 所有请求完成后，结果按照urls库暖白的顺序一次打出（发送请求的函数可以直接使用fetch即可）。 // 方法一 const concurrencyRequest = (urls, maxNum) =&gt; { return new Promise((resolve) =&gt; { if (urls.length === 0) { resolve([]); return } const results = []; let next = 0; let count = 0; async function request() { if (next === urls.length) return; const i = next; const url = urls[next]; console.info(url); try { const res = await fetch(url); results[i] = res; } catch (err) { results[i] = err; } finally { count++; if (count === urls.length) { console.info(\'完成了\'); resolve(results) } request(); } } // maxNum和urls.length取最小进行调用 const times = Math.min(maxNum, urls.length); for (let i = 0; i &lt; times; i++) { request(); } }) } const urls = []; for (let i = 1; i &lt;= 20; i++) { urls.push(`https://jsonplaceholder.typicode.com/todos/${i}`); } concurrencyRequest(urls, 3).then(res =&gt; { console.log(res); }) // 使用promise.all const sendRequest = (tasks, max, callback) =&gt; { let index = 0; let together = new Array(max).fill(null); const result = []; together = together.map(() =&gt; { return new Promise((resolve) =&gt; { const run = () =&gt; { if (index &gt;= tasks.length) { resolve(); return; } let cur = index; let task = tasks[index++]; task().then(res =&gt; { result[cur] = res; run(); }).catch((err) =&gt; { result[cur] = err; run(); }) } run(); }) }) Promise.all(together).then(() =&gt; callback(result)); } sendRequest(tasks, 3, (res) =&gt; { console.info(res) })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-15T10:57:23.000Z"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:published_time","content":"2022-11-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-15T10:57:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何实现并发请求控制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-15T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-15T10:57:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[]}],"git":{"createdTime":1668509843000,"updatedTime":1668509843000,"contributors":[{"name":"zhangting5","email":"zhangting5@xiaomi.xom","commits":1}]},"readingTime":{"minutes":1,"words":301},"filePathRelative":"article/前端如何实现并发请求控制 (copy).md","localizedDate":"2022年11月15日","excerpt":"<h2> 场景</h2>\\n<p>实现一个并发请求函数<code>concurrencyRequest(urls, maxNum)</code>，要求如下：</p>\\n<ul>\\n<li>要求最大并发数 <code>maxNum</code>；</li>\\n<li>每当有一个请求返回，就留下一个空位，可以增加新的请求；</li>\\n<li>所有请求完成后，结果按照urls库暖白的顺序一次打出（发送请求的函数可以直接使用<code>fetch</code>即可）。</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 方法一</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">concurrencyRequest</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">urls<span class=\\"token punctuation\\">,</span> maxNum</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Promise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>urls<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">const</span> results <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> next <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">request</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>next <span class=\\"token operator\\">===</span> urls<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token keyword\\">const</span> i <span class=\\"token operator\\">=</span> next<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">const</span> url <span class=\\"token operator\\">=</span> urls<span class=\\"token punctuation\\">[</span>next<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">fetch</span><span class=\\"token punctuation\\">(</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        results<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> res<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        results<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> err<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n        count<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>count <span class=\\"token operator\\">===</span> urls<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\'完成了\'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>results<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token function\\">request</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// maxNum和urls.length取最小进行调用</span>\\n    <span class=\\"token keyword\\">const</span> times <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">min</span><span class=\\"token punctuation\\">(</span>maxNum<span class=\\"token punctuation\\">,</span> urls<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> times<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">request</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> urls <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  urls<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">https://jsonplaceholder.typicode.com/todos/</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>i<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token function\\">concurrencyRequest</span><span class=\\"token punctuation\\">(</span>urls<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 使用promise.all</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">sendRequest</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">tasks<span class=\\"token punctuation\\">,</span> max<span class=\\"token punctuation\\">,</span> callback</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> index <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> together <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Array</span><span class=\\"token punctuation\\">(</span>max<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fill</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n  together <span class=\\"token operator\\">=</span> together<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Promise</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">run</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&gt;=</span> tasks<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">let</span> cur <span class=\\"token operator\\">=</span> index<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">let</span> task <span class=\\"token operator\\">=</span> tasks<span class=\\"token punctuation\\">[</span>index<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">task</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n          result<span class=\\"token punctuation\\">[</span>cur<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> res<span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">err</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n          result<span class=\\"token punctuation\\">[</span>cur<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> err<span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  Promise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">all</span><span class=\\"token punctuation\\">(</span>together<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">callback</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">sendRequest</span><span class=\\"token punctuation\\">(</span>tasks<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

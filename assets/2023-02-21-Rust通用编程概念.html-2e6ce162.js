import{_ as n,W as a,X as s,a2 as e}from"./framework-609d4fec.js";const t={},o=e(`<h1 id="通用编程概念" tabindex="-1"><a class="header-anchor" href="#通用编程概念" aria-hidden="true">#</a> 通用编程概念</h1><h2 id="变量与可变性" tabindex="-1"><a class="header-anchor" href="#变量与可变性" aria-hidden="true">#</a> 变量与可变性</h2><p>Rust变量默认不可变，但在变量前加 <code>mut</code> 可以使其可变。除了使变量的值可变，<code>mut</code>还会像阅读代码的人暗示其他代码可能会改变这个变量的值。</p><h3 id="变量与常量之间的不同" tabindex="-1"><a class="header-anchor" href="#变量与常量之间的不同" aria-hidden="true">#</a> 变量与常量之间的不同</h3><ul><li>不能用<code>mut</code>关键字来修饰常量；</li><li>使用<code>const</code>声明常量，并且必须显式地标注值的类型；<code>let</code>声明变量；</li><li>常量可以被声明在任何作用域中，甚至包括全局作用域；</li><li>只能将常量绑定到一个常量表达式上，而无法将一个函数的返回值，或其他需要在运行时计算的值绑定到常量上。</li></ul><h3 id="隐藏" tabindex="-1"><a class="header-anchor" href="#隐藏" aria-hidden="true">#</a> 隐藏</h3><p>一个新的声明变量可以覆盖旧的同名变量。在Rust中，我们将这一现象描述为：第一个变量被第二个变量隐藏 （shadow）了。可以重复使用let关键字并配以相同的名称来不断地隐藏变量：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="隐藏机制与mut的不同之处" tabindex="-1"><a class="header-anchor" href="#隐藏机制与mut的不同之处" aria-hidden="true">#</a> 隐藏机制与mut的不同之处：</h4><ul><li>不使用let的情况下重新为这个变量赋值，会导致编译错误，通过let，可以对值执行一系列的变换操作之后，还保持了不变形。</li><li>通过重复使用let关键字会创建出新的变量，可以在复用变量名的同时改变类型。mut声明的变量，则不能改变类型。</li></ul>`,10),c=[o];function i(l,p){return a(),s("div",null,c)}const d=n(t,[["render",i],["__file","2023-02-21-Rust通用编程概念.html.vue"]]);export{d as default};

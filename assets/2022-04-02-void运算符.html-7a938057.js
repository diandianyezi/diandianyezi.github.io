import{_ as e,W as p,X as o,Z as n,a1 as s,$ as t,a2 as c,C as i}from"./framework-609d4fec.js";const u={},l=n("h1",{id:"void运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#void运算符","aria-hidden":"true"},"#"),s(" void运算符")],-1),d={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",target:"_blank",rel:"noopener noreferrer"},r=c(`<p>The <code>void</code> operator evaluates the given <code>expression</code> and then returns <code>undefined</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: undefined</span>

<span class="token keyword">void</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;expression evaluated&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: &quot;expression evaluated&quot;</span>

<span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token function">iife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;iife is executed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: iife is executed</span>

<span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test function executed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test function is not defined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// expected output: &quot;test function is not defined&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h3><p><code>void expression</code></p><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h4><p>期望向一个表达式的值是<code>undefined</code>的地方插入会产生副作用的表达式。</p><p><code>void</code>运算符值用于获取<code>undefined</code>原始值，一般使用<code>void(0)</code></p><p>由于<code>undefined</code>并不是一个关键字，其在IE8-浏览器中会被重写，在高版本函数作用于中会被重写，所以可以用<code>void 0</code>来替换<code>undefiend</code>。</p><h4 id="立即调用的函数表达式" tabindex="-1"><a class="header-anchor" href="#立即调用的函数表达式" aria-hidden="true">#</a> 立即调用的函数表达式</h4><p><strong>这里有点难理解</strong></p><p>在使用IIFE时，可以利用<code>void</code>运算符让JavaScript引擎把一个<code>function</code>关键字识别成函数表达式而不是函数声明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token function">iife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">biz</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">biz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="javascript-uris" tabindex="-1"><a class="header-anchor" href="#javascript-uris" aria-hidden="true">#</a> JavaScript URIs</h4><p>当用户点击一个以<code>javascript::</code>开头的URI时，它会执行URI中的代码，然后用返回的值替换页面内容，除非返回的内容是<code>undefined</code>。<code>void</code>运算符可用于返回<code>undefined</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:void(0);<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  这个链接点击之后不会做任何事情，如果去掉 void()，
  点击之后整个页面会被替换成一个字符 0。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> chrome中即使<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:0;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>也没变化，firefox中会变成一个字符串0 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:void(document.body.style.backgroundColor=&#39;green&#39;);<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  点击这个链接会让页面背景变成绿色。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，虽然这么做是可行的，但利用 <code>javascript:</code> 伪协议来执行 JavaScript 代码是不推荐的，推荐的做法是为链接元素绑定事件。</p><h4 id="在箭头函数中避免泄露" tabindex="-1"><a class="header-anchor" href="#在箭头函数中避免泄露" aria-hidden="true">#</a> 在箭头函数中避免泄露</h4><p>箭头函数标准中，允许在函数体不使用括号来直接返回值。如果右侧调用了一个原本没有返回值的函数，其返回值改变后，则会导致非预期的副作用。安全起见，当函数返回值是一个不会被使用的时候，应该使用void运算符，来确保返回<code>undefined</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>button<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),k=n("code",null,"doSomething",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"undefined",-1),b=n("code",null,"true",-1);function f(h,g){const a=i("ExternalLinkIcon");return p(),o("div",null,[l,n("p",null,[n("a",d,[s("MDN介绍"),t(a)])]),r,n("p",null,[s("确保了当 "),k,s(" 的返回值从 "),n("a",v,[m,t(a)]),s(" 变为 "),b,s(" 的时候，不会改变函数的行为")])])}const x=e(u,[["render",f],["__file","2022-04-02-void运算符.html.vue"]]);export{x as default};

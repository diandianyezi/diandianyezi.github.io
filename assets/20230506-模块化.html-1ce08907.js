import{_ as n,W as s,X as a,a2 as e}from"./framework-609d4fec.js";const p={},t=e(`<h1 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h1><p>污染全局环境，命名冲突 耦合性强 不易维护</p><p>并行开发 提升效率</p><p>将复杂的程序依据一定的规则规范封装成几个文件，组合在一起，块内部的数据和实现是私有的，只向外暴露一些接口方法与外部其他模块通信。</p><h2 id="模块化的进化史" tabindex="-1"><a class="header-anchor" href="#模块化的进化史" aria-hidden="true">#</a> 模块化的进化史</h2><ol><li>简单封装：Namespace模式</li></ol><p>减少了Global上的变量数目</p><p>本质是对象，一点也不安全</p><ol start="2"><li>iife模式</li></ol><p>立即执行函数</p><p>函数是js唯一的local scope</p><ol><li><p>再增强一点：引入依赖</p><p>现代模块的基础</p></li></ol><h2 id="为什么要模块化" tabindex="-1"><a class="header-anchor" href="#为什么要模块化" aria-hidden="true">#</a> 为什么要模块化？</h2><p>部署方便 高解耦 复杂度降低</p><p>好处：避免命名冲突 更好分离 按需加载 高可复用性 高可维护性</p><p>带来的问题是：请求多 依赖模糊 难以维护</p><h2 id="模块化的规范" tabindex="-1"><a class="header-anchor" href="#模块化的规范" aria-hidden="true">#</a> 模块化的规范</h2><ul><li><p>Commonjs：mode使用，浏览器不认识require，需要提前编译打包</p><p>暴露模块：module.exports = value、exports.xxx = value <strong>暴露的都是exports对象</strong></p><p>引入模块：require(xxx) 第三方模块的xx为模块名，自定义模块的为模块文件路径</p><p>实现：服务器 node，浏览器端实现为用browserify工具实现</p><p>运行时加载，因为只有运行时才能得到这个对象，导致完全没有办法在编译时做“静态优化”</p></li><li><p>AMD：asynchronous module definition 异步模块定义</p><p>专门用于浏览器端模块的加载是异步的</p><p><strong>暴露模块</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义没有依赖的模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> 模块
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 定义有依赖的模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;module1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;module2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m1<span class="token punctuation">,</span> m2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> 模块
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;module1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;module2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m1<span class="token punctuation">,</span> m2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> 模块
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现（浏览器端）：</p><p><strong>require.js</strong></p></li><li><p>CMD：了解了解</p></li><li><p>ES6：</p></li></ul><h2 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> es6</h2><p>依赖模块需要编译打包处理</p><p>导出模块：export</p><p>引入模块：import</p><p>浏览器端实现：使用babel将es6转为es5，然后使用Browserify编译打包js</p>`,23),i=[t];function o(c,l){return s(),a("div",null,i)}const r=n(p,[["render",o],["__file","20230506-模块化.html.vue"]]);export{r as default};

import{_ as i,W as r,X as d,Z as e,a1 as a,$ as t,a2 as s,C as c}from"./framework-609d4fec.js";const l={},p=s(`<h1 id="git命令总结" tabindex="-1"><a class="header-anchor" href="#git命令总结" aria-hidden="true">#</a> Git命令总结</h1><h5 id="最近提交的内容" tabindex="-1"><a class="header-anchor" href="#最近提交的内容" aria-hidden="true">#</a> 最近提交的内容</h5><p>查看当前HEAD上最近一次的提交commit</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> show
// or
<span class="token function">git</span> log <span class="token parameter variable">-n1</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="修改提交信息" tabindex="-1"><a class="header-anchor" href="#修改提交信息" aria-hidden="true">#</a> 修改提交信息</h5><p>提交信息写错了且未push</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">--only</span> <span class="token parameter variable">-m</span> <span class="token string">&#39;xxxx&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你已经push了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p><h5 id="修改单个提交的用户名和邮箱" tabindex="-1"><a class="header-anchor" href="#修改单个提交的用户名和邮箱" aria-hidden="true">#</a> 修改单个提交的用户名和邮箱</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">--author</span> <span class="token string">&quot;my-name&lt;mail@email.com&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要修改所有历史，参考 <code>git filter -branch</code></p><h5 id="从提交里移除一个文件" tabindex="-1"><a class="header-anchor" href="#从提交里移除一个文件" aria-hidden="true">#</a> 从提交里移除一个文件</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout HEAD^ myfile
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="删除最后一次提交" tabindex="-1"><a class="header-anchor" href="#删除最后一次提交" aria-hidden="true">#</a> 删除最后一次提交</h5><p>如果需要删除推了个的提交，可以使用下面的方法。但是会不可逆的改变你的历史，也会搞乱哪些已经从仓库pull了的人的历史。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD^ <span class="token parameter variable">--hard</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果还没有push到远程。把git重置reset到你最后一次提交的状态即可（同事保存暂存的变化）:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p><h5 id="删除任意提交commit" tabindex="-1"><a class="header-anchor" href="#删除任意提交commit" aria-hidden="true">#</a> 删除任意提交commit</h5><blockquote><p>不到万不得已的时候不要这么做</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--onto</span> SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT
<span class="token function">git</span> push <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者做一个交互式rebase 删除哪些你想要删除的提交里所对应的行。</p><h5 id="push一个修正后的提交到远程-报错" tabindex="-1"><a class="header-anchor" href="#push一个修正后的提交到远程-报错" aria-hidden="true">#</a> push一个修正后的提交到远程，报错</h5><ul><li><p>强推（一般来说，要避免）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin myBranch <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>最好是创建和push一个新的提交。</p></li></ul><h5 id="硬重置之后-想找回内容" tabindex="-1"><a class="header-anchor" href="#硬重置之后-想找回内容" aria-hidden="true">#</a> 硬重置之后，想找回内容</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选择一个你需要重置的提交后</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> SHA123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="暂存staging" tabindex="-1"><a class="header-anchor" href="#暂存staging" aria-hidden="true">#</a> 暂存Staging</h4><h5 id="把暂存的提交添加到上次提交" tabindex="-1"><a class="header-anchor" href="#把暂存的提交添加到上次提交" aria-hidden="true">#</a> 把暂存的提交添加到上次提交</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="暂存新文件的一部分而不是全部" tabindex="-1"><a class="header-anchor" href="#暂存新文件的一部分而不是全部" aria-hidden="true">#</a> 暂存新文件的一部分而不是全部</h5><p>一般来说，想暂存一个文件的一部分，可以：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--patch</span> filename.x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-p 简写。会打开交互模式，会s选项来分隔提交；</p><p>如果一个文件是新的，没有这个选择，添加一个新文件时</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-N</span> filename.x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，使用e选项来手动选择需要添加的行，执行git diff --cached 将会显示哪些行已暂存，哪些行已保存到本地。</p><h5 id="将一个文件的变化加到两个提交里" tabindex="-1"><a class="header-anchor" href="#将一个文件的变化加到两个提交里" aria-hidden="true">#</a> 将一个文件的变化加到两个提交里</h5><p><code>git add -p</code> 允许交互式选择想要提交的部分。</p><h5 id="将暂存的内容编程未暂存-把未暂存的内容暂存起来" tabindex="-1"><a class="header-anchor" href="#将暂存的内容编程未暂存-把未暂存的内容暂存起来" aria-hidden="true">#</a> 将暂存的内容编程未暂存，把未暂存的内容暂存起来</h5><p>多数情况下，应该先将所有内容变为未暂存，再选择暂存的内容。</p><p>如果你想这么做，可以创建一个临时的commit 保存暂存的内容，然后暂存你的未暂存的内容并进行stash，然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;WIP&#39;</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> stash
<span class="token function">git</span> reset HEAD^
<span class="token function">git</span> stash pop <span class="token parameter variable">--index</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。</p><p>注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p></blockquote><h4 id="未暂存的内容unstaging" tabindex="-1"><a class="header-anchor" href="#未暂存的内容unstaging" aria-hidden="true">#</a> 未暂存的内容UnStaging</h4><h5 id="将未暂存的内容移动到一个新分支" tabindex="-1"><a class="header-anchor" href="#将未暂存的内容移动到一个新分支" aria-hidden="true">#</a> 将未暂存的内容移动到一个新分支</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> newBranch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="将未暂存的内容移动到另一个已存在的分支" tabindex="-1"><a class="header-anchor" href="#将未暂存的内容移动到另一个已存在的分支" aria-hidden="true">#</a> 将未暂存的内容移动到另一个已存在的分支</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash
<span class="token function">git</span> checkout my-branch
<span class="token function">git</span> stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="丢弃本地未提交的变化" tabindex="-1"><a class="header-anchor" href="#丢弃本地未提交的变化" aria-hidden="true">#</a> 丢弃本地未提交的变化</h5><p>如果想重置源origin和本地local之间的一些提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># one commit</span>
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
<span class="token comment"># two commits</span>
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^^
<span class="token comment"># four commits</span>
<span class="token punctuation">(</span>my-branch<span class="token punctuation">)</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~4
<span class="token comment"># or</span>
<span class="token punctuation">(</span>main<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重置某个特殊的文件，可以用文件名做参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="想丢弃未暂存的内容" tabindex="-1"><a class="header-anchor" href="#想丢弃未暂存的内容" aria-hidden="true">#</a> 想丢弃未暂存的内容</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-p</span>
<span class="token comment"># Answer y to all of the snippets you want to drop</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个方式是用<code>stash</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span>
<span class="token function">git</span> stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者 stash不需要的部分，然后 stash drop</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> stash <span class="token parameter variable">-p</span>
<span class="token comment"># Select all of the snippets you don&#39;t want to save</span>
<span class="token function">git</span> stash drop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="分支branches" tabindex="-1"><a class="header-anchor" href="#分支branches" aria-hidden="true">#</a> 分支Branches</h4><h5 id="从错误分支拉取内容或把内容拉取到错误分支" tabindex="-1"><a class="header-anchor" href="#从错误分支拉取内容或把内容拉取到错误分支" aria-hidden="true">#</a> 从错误分支拉取内容或把内容拉取到错误分支</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog
<span class="token comment"># 选取pull之前的一次提交 然后reset --hard</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> SHA1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="想扔掉本地分支的提交-与远端的保持一致" tabindex="-1"><a class="header-anchor" href="#想扔掉本地分支的提交-与远端的保持一致" aria-hidden="true">#</a> 想扔掉本地分支的提交，与远端的保持一致</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
<span class="token comment"># On branch my-branch</span>
<span class="token comment"># Your branch is ahead of &#39;origin/my-branch&#39; by 2 commits.</span>
<span class="token comment">#   (use &quot;git push&quot; to publish your local commits)</span>
<span class="token comment">#</span>

<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="我需要提交到一个新分支-但是提交到了main" tabindex="-1"><a class="header-anchor" href="#我需要提交到一个新分支-但是提交到了main" aria-hidden="true">#</a> 我需要提交到一个新分支，但是提交到了main</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch my-branch
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="想保留一个来自另外一个ref-ish的整个文件" tabindex="-1"><a class="header-anchor" href="#想保留一个来自另外一个ref-ish的整个文件" aria-hidden="true">#</a> 想保留一个来自另外一个ref-ish的整个文件</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>develop分支：git checkout solution -- file1.txt
<span class="token comment"># 这个文件内容从分支 solution 拿到分支 develop 里来，</span>
<span class="token comment"># 然后正常提交</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="删除上游upstream分支被删除了的本地分支" tabindex="-1"><a class="header-anchor" href="#删除上游upstream分支被删除了的本地分支" aria-hidden="true">#</a> 删除上游upstream分支被删除了的本地分支</h5>`,72),o={href:"http://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247496560&idx=1&sn=2e9d4b74085b1ebd73b6c4145d0f28de&chksm=e9c0a110deb72806c10a2165a0979749e675b2bee4219e11f76da46b5be96fd32d8068ad2b23&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},u=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="不小心删除了我的分支" tabindex="-1"><a class="header-anchor" href="#不小心删除了我的分支" aria-hidden="true">#</a> 不小心删除了我的分支</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> SHA1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="删除远程分支" tabindex="-1"><a class="header-anchor" href="#删除远程分支" aria-hidden="true">#</a> 删除远程分支</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> my-branch
<span class="token comment"># or</span>
<span class="token function">git</span> push origin :my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除本地分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-D</span> my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="想从别人正在工作的远程分支签出一个分支" tabindex="-1"><a class="header-anchor" href="#想从别人正在工作的远程分支签出一个分支" aria-hidden="true">#</a> 想从别人正在工作的远程分支签出一个分支</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch <span class="token parameter variable">--all</span>
<span class="token function">git</span> checkout <span class="token parameter variable">--track</span> origin/davas

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p><h4 id="rebasing-和-merging" tabindex="-1"><a class="header-anchor" href="#rebasing-和-merging" aria-hidden="true">#</a> Rebasing 和 Merging</h4><h5 id="撤销rebase或merge" tabindex="-1"><a class="header-anchor" href="#撤销rebase或merge" aria-hidden="true">#</a> 撤销rebase或merge</h5><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> ORIG_HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="已经rebase过-不想强推-force-push" tabindex="-1"><a class="header-anchor" href="#已经rebase过-不想强推-force-push" aria-hidden="true">#</a> 已经rebase过，不想强推 force push</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout my-branch
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> main
<span class="token function">git</span> checkout main
<span class="token function">git</span> merge --ff-only my-branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="组合几个提交" tabindex="-1"><a class="header-anchor" href="#组合几个提交" aria-hidden="true">#</a> 组合几个提交</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> main
<span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;new feature&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想更多的控制 想保留时间戳，可以做交互式rebase</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>https://mp.weixin.qq.com/s/vEC6KgPpQcF54z2wnfCHjA</p><p>&quot;http://staging.mifi.pt.xiaomi.com/loan/newContract/market/210_5.html?date=1682494121449&amp;name=<em>%E7%95%85&amp;mobile=186</em><em><strong>2384&amp;idNum=3708</strong></em><strong><strong><strong><em>2741&amp;params=%7B%22date%22%3A%221682494121449%22%2C%22name%22%3A%22</em>%E7%95%85%22%2C%22mobile%22%3A%22186</strong></strong>2384%22%2C%22idNum%22%3A%223708</strong>********2741%22%7D&amp;productId=210&amp;extraParams=&amp;pauseTime=5&quot;</p>`,22);function h(m,b){const n=c("ExternalLinkIcon");return r(),d("div",null,[p,e("p",null,[a("一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（"),e("a",o,[a("IDEA 中玩转 Git"),t(n)]),a("）。")]),u])}const g=i(l,[["render",h],["__file","20230426-git操作.html.vue"]]);export{g as default};

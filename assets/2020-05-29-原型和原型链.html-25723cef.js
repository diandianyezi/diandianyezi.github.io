import{_ as n,W as s,X as a,a2 as e}from"./framework-609d4fec.js";const t={},p=e(`<p>本篇博客主要是对 Javcscript 原型和原型链的学习理解</p><h2 id="理解原型" tabindex="-1"><a class="header-anchor" href="#理解原型" aria-hidden="true">#</a> 理解原型</h2><p>JavaScript 常被描述为一种基于原型的语言——每个对象拥有一个<code>__proto__</code>，指向它的原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链。</p><h2 id="构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#构造函数创建对象" aria-hidden="true">#</a> 构造函数创建对象</h2><p><code>JavaScript</code> 中使用 <code>new</code> 操作符，通过构造函数初始化新对象。我们先使用构造函数创建一个对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>swung <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> ninja <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninja<span class="token punctuation">.</span>swung<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面例子中，简单的通过 Ninja 构造器实例一个对象。接下来我们通过这个例子详细展开。</p><h2 id="prototype" tabindex="-1"><a class="header-anchor" href="#prototype" aria-hidden="true">#</a> prototype</h2><p>在 JavaScript 中，函数可以有属性。每个函数都有一个特殊的属性叫作原型（<code>prototype</code>）。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Ninja</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>swung <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">const</span> ninja <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninja<span class="token punctuation">.</span>swung<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中 Ninja 函数的 <code>prototype</code> 属性指向的是一个对象，被构建的实例对象 ninja 的原型也指向这个对象。关于 ninja 原型则在下面详细展开：</p><h2 id="proto" tabindex="-1"><a class="header-anchor" href="#proto" aria-hidden="true">#</a> __ proto__</h2><p>在 JavaScript 中，实例对象的原型属性是内置属性（使用标记 <code>[[prototype]]</code>）。ES6之前 ECMAScript 标准没有提供接口访问这个属性的，但是许多浏览器都实现了 JavaScript 非标准的内置属性__proto__来访问对象属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>swung <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> ninja <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninja<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Ninja</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个JavaScript对象(除了<code>null</code>)都具有__proto__属性，这个属性会指向该对象的原型。</p><p>接着在看下面这个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>swung <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> ninja <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>ninja<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Ninja</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6开始，ECMAScript 标准提供了 <code>Object.getPrototypeOf()</code> 和 <code>Object.setPrototypeOf()</code> 访问器来访问和设置原型。__proto__它本质上是一个内部属性，而不是一个正式的对外的 API，只是由于浏览器广泛支持，才被加入了 <code>ES6</code>，所以建议不要使用。</p><p>上面例子中构造函数原型和实例对象原型是相同的，它们的原型中还包含一个特殊的属性 <code>constructor</code> 用于指向构造函数。</p><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h2><p>每个原型都有一个 <code>constructor</code> 属性指向关联的构造函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Ninja</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Ninja<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构造函数、实例对象和-constructor-关系图" tabindex="-1"><a class="header-anchor" href="#构造函数、实例对象和-constructor-关系图" aria-hidden="true">#</a> 构造函数、实例对象和 constructor 关系图</h2><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h2><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Ninja</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>swung <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">const</span> ninja <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ninja<span class="token punctuation">.</span>swung <span class="token operator">=</span> <span class="token boolean">false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninja<span class="token punctuation">.</span>swung<span class="token punctuation">)</span> <span class="token comment">// false</span>

<span class="token keyword">delete</span> ninja<span class="token punctuation">.</span>swung
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninja<span class="token punctuation">.</span>swung<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原型链的最顶层即原型链的终点<code>Object.prototype</code>为null,我们可以打印：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>null 表示“没有对象”，即该处不应该有值。</p></blockquote><p>所以 <code>Object.prototype.__ proto__</code> 的值为 <code>null</code> 跟 <code>Object.prototype</code> 没有原型，其实表达了一个意思。</p><p>所以查找属性的时候查到 <code>Object.prototype</code> 就停止查找了。</p>`,32),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","2020-05-29-原型和原型链.html.vue"]]);export{r as default};

import{_ as e,W as a,X as r,a2 as s}from"./framework-609d4fec.js";const i={},n=s(`<h1 id="git操作之rebase-和merge" tabindex="-1"><a class="header-anchor" href="#git操作之rebase-和merge" aria-hidden="true">#</a> Git操作之rebase 和merge</h1><p>将一个分支合并到另外一个分支有两种策略rebase衍合和merge合并。</p><h2 id="rebase" tabindex="-1"><a class="header-anchor" href="#rebase" aria-hidden="true">#</a> rebase</h2><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用？</h3><p>merge命令会将两个分支最新的快照以及二者最新的共同祖先进行三方合并。</p><p>rebase会自己的分支里产生的变化补丁重新在main分支的基础上打一遍。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout my-branch
<span class="token function">git</span> rebase master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>原理：</p><p>回到两个分支的共同祖先，提取你所在分支每次提交时产生的差异diff，把这些差异分别保存到临时文件里，然后从当前分支转换到你需要衍合的分支，依序使用每个差异补丁文件。</p><p>rebase能产生一个更为整洁的提交历史。rebase按照每行改变发生的次序重演发 生的改变，而merge是把最终结果合在一起。</p><h3 id="更多有趣的衍合" tabindex="-1"><a class="header-anchor" href="#更多有趣的衍合" aria-hidden="true">#</a> 更多有趣的衍合？</h3><p>你还可以在衍合分支以外的地方衍合</p><p><code>git rebase [主分支] [特性分支]</code> 命令会先检出特性分支，然后在主分支 master 上重演:</p>`,13),t=[n];function d(c,h){return a(),r("div",null,t)}const l=e(i,[["render",d],["__file","20230428-git之rebasse和merge.html.vue"]]);export{l as default};

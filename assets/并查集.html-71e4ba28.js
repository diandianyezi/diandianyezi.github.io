const e=JSON.parse('{"key":"v-277055b0","path":"/article/%E5%B9%B6%E6%9F%A5%E9%9B%86.html","title":"并查集","lang":"zh-CN","frontmatter":{"title":"并查集","date":"2022-11-01T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":"数据结构","description":"并查集 并查集（union &amp; find）：用于处理一些元素的合并和查询问题，管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点都表示对应集合中的元素。 Find：确定元素属于哪一个子集，他可以被用来确定两个元素是否属于同一个子集，加入路径压缩，复杂度近乎O(1)； Union：将两个子集合并成同一个集合 初始化 初始时，每个元素都位于一个单独的集合，表示为一棵只有根节点的树。方便起见，我们将根节点的父亲设为自己。 查询 沿着树向上移动，直至找到根节点","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/%E5%B9%B6%E6%9F%A5%E9%9B%86.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"并查集"}],["meta",{"property":"og:description","content":"并查集 并查集（union &amp; find）：用于处理一些元素的合并和查询问题，管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点都表示对应集合中的元素。 Find：确定元素属于哪一个子集，他可以被用来确定两个元素是否属于同一个子集，加入路径压缩，复杂度近乎O(1)； Union：将两个子集合并成同一个集合 初始化 初始时，每个元素都位于一个单独的集合，表示为一棵只有根节点的树。方便起见，我们将根节点的父亲设为自己。 查询 沿着树向上移动，直至找到根节点"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T13:30:52.000Z"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T13:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并查集\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T13:30:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"查询","slug":"查询","link":"#查询","children":[]},{"level":2,"title":"路径压缩","slug":"路径压缩","link":"#路径压缩","children":[]},{"level":2,"title":"合并","slug":"合并","link":"#合并","children":[]},{"level":2,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":2,"title":"移动","slug":"移动","link":"#移动","children":[]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":2,"title":"Leetcode示例","slug":"leetcode示例","link":"#leetcode示例","children":[]}],"git":{"createdTime":1678887052000,"updatedTime":1678887052000,"contributors":[{"name":"zhangting","email":"1092923594@qq.com","commits":1}]},"readingTime":{"minutes":2.65,"words":794},"filePathRelative":"article/并查集.md","localizedDate":"2022年11月1日","excerpt":"<h1> 并查集</h1>\\n<p>并查集（union &amp; find）：用于处理一些元素的合并和查询问题，管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点都表示对应集合中的元素。</p>\\n<p>Find：确定元素属于哪一个子集，他可以被用来确定两个元素是否属于同一个子集，加入路径压缩，复杂度近乎O(1)；</p>\\n<p>Union：将两个子集合并成同一个集合</p>\\n<h2> 初始化</h2>\\n<p>初始时，每个元素都位于一个单独的集合，表示为一棵只有根节点的树。方便起见，我们将根节点的父亲设为自己。</p>\\n<h2> 查询</h2>\\n<p>沿着树向上移动，直至找到根节点</p>","autoDesc":true}');export{e as data};

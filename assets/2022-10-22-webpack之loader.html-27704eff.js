const e=JSON.parse('{"key":"v-3732f830","path":"/article/2022-10-22-webpack%E4%B9%8Bloader.html","title":"Webpack Loader","lang":"zh-CN","frontmatter":{"title":"Webpack Loader","date":"2022-10-22T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":"Javascript","tag":["webpack"],"description":"Loader 用于对模块的源代码进行转换。loader 可以使你在 import 或 \\"load(加载)\\" 模块时预处理文件。因此，loader类似于其他构建工具中的 任务task，提供了处理前端构建步骤的得力方式。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS 文件！ 使用loader 两种方式 配置方式：在配置文件中指定loader； 内联方式：在每个import语句中显示指定loader。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/2022-10-22-webpack%E4%B9%8Bloader.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"Webpack Loader"}],["meta",{"property":"og:description","content":"Loader 用于对模块的源代码进行转换。loader 可以使你在 import 或 \\"load(加载)\\" 模块时预处理文件。因此，loader类似于其他构建工具中的 任务task，提供了处理前端构建步骤的得力方式。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS 文件！ 使用loader 两种方式 配置方式：在配置文件中指定loader； 内联方式：在每个import语句中显示指定loader。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-10-31T04:07:03.000Z"}],["meta",{"property":"article:tag","content":"webpack"}],["meta",{"property":"article:published_time","content":"2022-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-31T04:07:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Webpack Loader\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2022-10-31T04:07:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用loader","slug":"使用loader","link":"#使用loader","children":[{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"内联方式","slug":"内联方式","link":"#内联方式","children":[]}]},{"level":2,"title":"loader特性","slug":"loader特性","link":"#loader特性","children":[]},{"level":2,"title":"解析loader","slug":"解析loader","link":"#解析loader","children":[]}],"git":{"createdTime":1667189223000,"updatedTime":1667189223000,"contributors":[{"name":"zhangting5","email":"zhangting5@xiaomi.xom","commits":1}]},"readingTime":{"minutes":2.08,"words":624},"filePathRelative":"article/2022-10-22-webpack之loader.md","localizedDate":"2022年10月22日","excerpt":"<h1> Loader</h1>\\n<p>用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或 \\"load(加载)\\" 模块时预处理文件。因此，loader类似于其他构建工具中的 任务task，提供了处理前端构建步骤的得力方式。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 <code>import</code> CSS 文件！</p>\\n<h2> 使用loader</h2>\\n<p>两种方式</p>\\n<ol>\\n<li>配置方式：在配置文件中指定loader；</li>\\n<li>内联方式：在每个import语句中显示指定loader。</li>\\n</ol>","autoDesc":true}');export{e as data};

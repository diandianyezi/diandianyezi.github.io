const e=JSON.parse('{"key":"v-5afaf568","path":"/article/2022-04-12-%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4.html","title":"首屏加载时间","lang":"zh-CN","frontmatter":{"title":"首屏加载时间","date":"2022-04-12T00:00:00.000Z","sidebar":"heading","breadcrumb":true,"lastUpdated":true,"contributors":true,"editLink":false,"category":["性能"],"tag":["性能指标"],"description":"什么是首屏加载时间？ 浏览器从相应用户输入网址到首屏内容渲染完成的时间。整个网页不需要全部加载完成，视口内的内容显示即可。 如何计算首屏加载时间？ 在Chrome的控制台中的Load就是 首屏加载时间慢的原因？ 网络延时 资源文件体积过大 资源重复请求加载 加载脚本过程中，渲染堵塞。 针对以上2，3原因，有以下解决方案： 减少入口文件体积 路由懒加载 以函数形式加载路由，可以将各自的路由文件打包，在访问对应路由的时候再加载路由文件。 静态资源本地缓存 前端合理使用localStorage，sessionStorage等缓存方式。 采用HTTP缓存，设置Cache-Control，Last-Modified，Etag等响应头。 采用Service Worker离线缓存 按需加载 像ant-design-vue，可以使用babel插件按需加载 避免组件文件重复打包 使用SSR（服务端渲染），即组件和页面通过服务器生成html字符串，再发送到浏览器。vue可以使用Nuxt.js实现服务端渲染 图片压缩 防抖节流 有一些请求可以不用频繁请求，减少服务器压力","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-v2-demo.netlify.app/article/2022-04-12-%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4.html"}],["meta",{"property":"og:site_name","content":"Yezi’s Blog"}],["meta",{"property":"og:title","content":"首屏加载时间"}],["meta",{"property":"og:description","content":"什么是首屏加载时间？ 浏览器从相应用户输入网址到首屏内容渲染完成的时间。整个网页不需要全部加载完成，视口内的内容显示即可。 如何计算首屏加载时间？ 在Chrome的控制台中的Load就是 首屏加载时间慢的原因？ 网络延时 资源文件体积过大 资源重复请求加载 加载脚本过程中，渲染堵塞。 针对以上2，3原因，有以下解决方案： 减少入口文件体积 路由懒加载 以函数形式加载路由，可以将各自的路由文件打包，在访问对应路由的时候再加载路由文件。 静态资源本地缓存 前端合理使用localStorage，sessionStorage等缓存方式。 采用HTTP缓存，设置Cache-Control，Last-Modified，Etag等响应头。 采用Service Worker离线缓存 按需加载 像ant-design-vue，可以使用babel插件按需加载 避免组件文件重复打包 使用SSR（服务端渲染），即组件和页面通过服务器生成html字符串，再发送到浏览器。vue可以使用Nuxt.js实现服务端渲染 图片压缩 防抖节流 有一些请求可以不用频繁请求，减少服务器压力"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-28T02:52:07.000Z"}],["meta",{"property":"article:tag","content":"性能指标"}],["meta",{"property":"article:published_time","content":"2022-04-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-07-28T02:52:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"首屏加载时间\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-12T00:00:00.000Z\\",\\"dateModified\\":\\"2022-07-28T02:52:07.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是首屏加载时间？","slug":"什么是首屏加载时间","link":"#什么是首屏加载时间","children":[]},{"level":2,"title":"如何计算首屏加载时间？","slug":"如何计算首屏加载时间","link":"#如何计算首屏加载时间","children":[]},{"level":2,"title":"首屏加载时间慢的原因？","slug":"首屏加载时间慢的原因","link":"#首屏加载时间慢的原因","children":[]}],"git":{"createdTime":1658318463000,"updatedTime":1658976727000,"contributors":[{"name":"zhangting5","email":"zhangting5@xiaomi.xom","commits":3}]},"readingTime":{"minutes":1.22,"words":365},"filePathRelative":"article/2022-04-12-首屏加载时间.md","localizedDate":"2022年4月12日","excerpt":"<h2> 什么是首屏加载时间？</h2>\\n<p>浏览器从相应用户输入网址到首屏内容渲染完成的时间。整个网页不需要全部加载完成，视口内的内容显示即可。</p>\\n<h2> 如何计算首屏加载时间？</h2>\\n<p>在Chrome的控制台中的Load就是</p>\\n<h2> 首屏加载时间慢的原因？</h2>\\n<ol>\\n<li>网络延时</li>\\n<li>资源文件体积过大</li>\\n<li>资源重复请求加载</li>\\n<li>加载脚本过程中，渲染堵塞。</li>\\n</ol>\\n<p>针对以上2，3原因，有以下解决方案：</p>\\n<ol>\\n<li>减少入口文件体积</li>\\n</ol>\\n<ul>\\n<li>\\n<p>路由懒加载</p>\\n<p>以函数形式加载路由，可以将各自的路由文件打包，在访问对应路由的时候再加载路由文件。</p>\\n</li>\\n<li>\\n<p>静态资源本地缓存</p>\\n<p>前端合理使用localStorage，sessionStorage等缓存方式。</p>\\n<p>采用HTTP缓存，设置Cache-Control，Last-Modified，Etag等响应头。</p>\\n<p>采用Service Worker离线缓存</p>\\n</li>\\n<li>\\n<p>按需加载</p>\\n<p>像ant-design-vue，可以使用babel插件按需加载</p>\\n</li>\\n<li>\\n<p>避免组件文件重复打包</p>\\n</li>\\n<li>\\n<p>使用SSR（服务端渲染），即组件和页面通过服务器生成html字符串，再发送到浏览器。vue可以使用Nuxt.js实现服务端渲染</p>\\n</li>\\n<li>\\n<p>图片压缩</p>\\n</li>\\n<li>\\n<p>防抖节流</p>\\n<p>有一些请求可以不用频繁请求，减少服务器压力</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
